{
    "docs": [
        {
            "location": "/", 
            "text": "JPSreport\n\n\nJPSreport\n is one module in \nJuPedSim\n. It focuses on the analysis of pedestrian characteristics using trajectories obtained from video recordings as well as simulations. \n\n\nIn current version, four different measurement methods are integrated in \nJPSreport\n to analyze pedestrian movement in different aspects and scales. These methods are mainly based on the PhD-thesis: \n\n\nPedestrian fundamental diagrams: Comparative analysis of experiments in different geometries\n.\n\n\nThe architecture of \nJPSreport\n can be shown as the figure below. \n\n\n\n\nQuick usage\n\n\nThree input files are required to run \nJPSreport\n:\n\n\n\n\nTrajectory file\n: Pedestrians\ns 2D position information over time. \n.xml\n and \n.txt\n format are adopted.\n\n\nGeometry file\n: Geometry information for a certain trajectory data. This file should be in \n.xml\n format.\n\n\nConfiguration file\n: This inifile give some information related to each measurement method. For example, the information of measurement area et al. This file should be in \n.xml\n format.\n\n\n\n\nFurther information for the three input files will be described in other pages in more detail.  Possible output of \nJPSreport\n includes data for plotting fundamental diagrams, Voronoi diagrams and profiles of pedestrians etc. in a given geometry. All the output data, e.g. density and speed, are stored in different folders as plain text in ASCII format.", 
            "title": "Home"
        }, 
        {
            "location": "/#jpsreport", 
            "text": "JPSreport  is one module in  JuPedSim . It focuses on the analysis of pedestrian characteristics using trajectories obtained from video recordings as well as simulations.   In current version, four different measurement methods are integrated in  JPSreport  to analyze pedestrian movement in different aspects and scales. These methods are mainly based on the PhD-thesis:   Pedestrian fundamental diagrams: Comparative analysis of experiments in different geometries .  The architecture of  JPSreport  can be shown as the figure below.", 
            "title": "JPSreport"
        }, 
        {
            "location": "/#quick-usage", 
            "text": "Three input files are required to run  JPSreport :   Trajectory file : Pedestrians s 2D position information over time.  .xml  and  .txt  format are adopted.  Geometry file : Geometry information for a certain trajectory data. This file should be in  .xml  format.  Configuration file : This inifile give some information related to each measurement method. For example, the information of measurement area et al. This file should be in  .xml  format.   Further information for the three input files will be described in other pages in more detail.  Possible output of  JPSreport  includes data for plotting fundamental diagrams, Voronoi diagrams and profiles of pedestrians etc. in a given geometry. All the output data, e.g. density and speed, are stored in different folders as plain text in ASCII format.", 
            "title": "Quick usage"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/", 
            "text": "Code Style\n\n\nIn JuPedSim we try to code according to the \nStroustrup\n style of formatting/indenting. \nIf you want (or have) to write code in JuPedSim you really \nneed\n to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.\n\n\nThe code is formated using the automatic formatter \nastyle\n  with the option \n--style=stroustrup\n:\n\n\n\n\nStroustrup style formatting/indenting uses stroustrup brackets. \nBrackets are broken from function definitions only.\nBrackets are attached to everything else including \nnamespaces, classes, and statements within a function, arrays, structs, and enums. \nThis style frequently is used with an indent of 5 spaces. \n\n\n\n\nHere is an \nexample:\n\n\nint Foo(bool isBar) \n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}\n\n\n\n\nTabs vs Spaces\n\n\nThis can be a long and religious discussion, to make it short \nDO NOT\n use tabs, just spaces please.\n\n\nHere are some hints to configure your editor in order to use the \nstroustrup\n style\n\n\n\n\nEmacs\n:\n    Add this to your \n.emacs\n\n\n\n\n(setq c-default-style \nstroustrup\n c-basic-offset 5)\n(setq indent-tabs-mode nil)\n\n\n\n\n\n\nVim\n:\n    Set in your config file these variables\n\n\n\n\n:set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5\n\n\n\n\n\n\nEclipse\n:\n    Here is a \nplugin\n for astyle in eclipse.\n    Read also\n    \nHow to change indentation width in eclipse?\n\n\n\n\nComments\n\n\nComments and commit messages have to be written in \nEnglish\n. Please write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing.", 
            "title": "Code Style"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#code-style", 
            "text": "In JuPedSim we try to code according to the  Stroustrup  style of formatting/indenting. \nIf you want (or have) to write code in JuPedSim you really  need  to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.  The code is formated using the automatic formatter  astyle   with the option  --style=stroustrup :   Stroustrup style formatting/indenting uses stroustrup brackets. \nBrackets are broken from function definitions only.\nBrackets are attached to everything else including \nnamespaces, classes, and statements within a function, arrays, structs, and enums. \nThis style frequently is used with an indent of 5 spaces.    Here is an  example:  int Foo(bool isBar) \n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}", 
            "title": "Code Style"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#tabs-vs-spaces", 
            "text": "This can be a long and religious discussion, to make it short  DO NOT  use tabs, just spaces please.  Here are some hints to configure your editor in order to use the  stroustrup  style   Emacs :\n    Add this to your  .emacs   (setq c-default-style  stroustrup  c-basic-offset 5)\n(setq indent-tabs-mode nil)   Vim :\n    Set in your config file these variables   :set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5   Eclipse :\n    Here is a  plugin  for astyle in eclipse.\n    Read also\n     How to change indentation width in eclipse?", 
            "title": "Tabs vs Spaces"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#comments", 
            "text": "Comments and commit messages have to be written in  English . Please write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing.", 
            "title": "Comments"
        }, 
        {
            "location": "/contributing/workflow/", 
            "text": "Workflow\n\n\nThis is a git-specific workflow that helps you contribute flawlessly you JuPedSim.\n\n\n\n\nClone the project (for the first time)\n\n\n\n\n    git clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git\n\n\n\n\n\n\nChange to the developement branch and create a branch with your feature.\n\n\n\n\n    git checkout developement \n    git checkout -b feature_name\n\n\n\n\n\n\nWrite code and Commit changes\n\n\n\n\n    git commit -m \nDescribe here your changes\n\n\n\n\n\n\n\nPush your branch to GitLab. But before doing so, \ntest\n your code.\n\n\n\n\n    git push origin feature_name\n\n\n\n\n\n\n\n\nCreate a merge request\n\n\na \nMaster\n will review your code \n merge it to the developement branch (maybe).\n\n\n\n\n\n\nTips Working with Git\n\n\n\n\nPull frequently.\n\n\nCommit often, but don\u2019t push every commit.\n\n\nCreate one commit per unit of work. Break your changes down into multiple commits, e.g. \nfix bug\n, \nadd documentation\n, etc.\n\n\nPush when changes are tested.\n\n\n\n\nSee also \n8 Tips to help you work better with Git\n.\n\n\nKeywords for closing issues\n\n\nThe following keywords will close an issue via commit message:\n\n\n\n\nclose\n\n\ncloses\n\n\nclosed\n\n\nfix\n\n\nfixes\n\n\nfixed\n\n\n\n\nThe closing-pattern\n is as follows:\n\n\n((?:[Cc]los(?:e[sd]?|ing)|[Ff]ix(?:e[sd]|ing)?) +(?:(?:issues? +)?%{issue_ref}(?:(?:, *| +and +)?))+)\n\n\n\n\n\n\nTop Tip\n: Your code is maybe fine if you see on the repository\ns front page this symbol\n\n\n\nbefore your commit.", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/workflow/#workflow", 
            "text": "This is a git-specific workflow that helps you contribute flawlessly you JuPedSim.   Clone the project (for the first time)       git clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git   Change to the developement branch and create a branch with your feature.       git checkout developement \n    git checkout -b feature_name   Write code and Commit changes       git commit -m  Describe here your changes    Push your branch to GitLab. But before doing so,  test  your code.       git push origin feature_name    Create a merge request  a  Master  will review your code   merge it to the developement branch (maybe).", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/workflow/#tips-working-with-git", 
            "text": "Pull frequently.  Commit often, but don\u2019t push every commit.  Create one commit per unit of work. Break your changes down into multiple commits, e.g.  fix bug ,  add documentation , etc.  Push when changes are tested.   See also  8 Tips to help you work better with Git .", 
            "title": "Tips Working with Git"
        }, 
        {
            "location": "/contributing/workflow/#keywords-for-closing-issues", 
            "text": "The following keywords will close an issue via commit message:   close  closes  closed  fix  fixes  fixed   The closing-pattern  is as follows:  ((?:[Cc]los(?:e[sd]?|ing)|[Ff]ix(?:e[sd]|ing)?) +(?:(?:issues? +)?%{issue_ref}(?:(?:, *| +and +)?))+)   Top Tip : Your code is maybe fine if you see on the repository s front page this symbol  \nbefore your commit.", 
            "title": "Keywords for closing issues"
        }, 
        {
            "location": "/contributing/utest/", 
            "text": "Unit testing, verification and validation tests\n\n\nTesting should be enabled by cmake as follows:\n\n\ncmake -DBUILD_TESTING=ON ..\n\n\n\n\nAfter compiling (\nmake\n) the tests can be called as follows:\n\n\nctest\n\n\n\n\nThis will take some hours time (depending on your machine). Threfore, a quick testing could be used:\n\n\nctest -R Boost\n\n\n\n\nwhich run a limited set of tests on the code.\n\n\nWriting a unit test\n\n\nIf you write a unit test the first lines in your file should be\n\n\n#define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include \nboost/test/unit_test.hpp\n\n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)\n\n\n\n\nThen you can start implementing your test cases by using\n\n\nBOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n  }\n\n\n\n\nFor each method or function you want to test you should write a new test case and give it a speaking name.\n\n\nVerification and validation\n\n\nBesides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for \nJuPedSim\n (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.\n\n\nTo write additional tests, create a directory under \nUtest/\n.\n\n\n\n\nCreate in \n./jpscore/Utest/\n a new direct with a descriptive name. For\n   example: \n/Utest/test_case1/\n\n\nPut in that directory an ini-file (referred to as \nmaster-inifile\n)\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax\n\n\n\n\nExample:\n\n\n   \nmax_sim_time\n[3,4]\n/max_sim_time\n \n   \nseed\nrange(1, 10)\n/seed\n\n\n\n\n\n\n\nrun the script \nmakeini.py\n with the obligatory option \n-f\n: Using the\n    aforementioned example the call is:\n\n\n\n\n   python makeini.py -f test_case1/inifile.xml\n\n\n\n\nThe Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory \ninifiles\n.\n\n\n\n\nWrite a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.\n\n\n\n\nYour script has to start with the following lines:\n\n\n#!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *\n\n\n\n\nAfter including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.\n\n\ndef runtest(inifile, trajfile):\n\n\n\n\nYou can also use more than these arguments like this:\n\n\ndef runtest(inifile, trajfile, x, y, z):\n\n\n\n\nIf you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like\n\n\nif condition_fails: \n  exit(FAILURE)\n\n\n\n\nOnce you have written your test you have to make your script executable, so it has to contain a main function which calls the test:\n\n\nif __name__ == \n__main__\n:\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info(\n%s exits with SUCCESS\n % (argv[0]))\n  exit(SUCCESS)", 
            "title": "Unit testing"
        }, 
        {
            "location": "/contributing/utest/#unit-testing-verification-and-validation-tests", 
            "text": "Testing should be enabled by cmake as follows:  cmake -DBUILD_TESTING=ON ..  After compiling ( make ) the tests can be called as follows:  ctest  This will take some hours time (depending on your machine). Threfore, a quick testing could be used:  ctest -R Boost  which run a limited set of tests on the code.", 
            "title": "Unit testing, verification and validation tests"
        }, 
        {
            "location": "/contributing/utest/#writing-a-unit-test", 
            "text": "If you write a unit test the first lines in your file should be  #define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include  boost/test/unit_test.hpp \n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)  Then you can start implementing your test cases by using  BOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n  }  For each method or function you want to test you should write a new test case and give it a speaking name.", 
            "title": "Writing a unit test"
        }, 
        {
            "location": "/contributing/utest/#verification-and-validation", 
            "text": "Besides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for  JuPedSim  (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.  To write additional tests, create a directory under  Utest/ .   Create in  ./jpscore/Utest/  a new direct with a descriptive name. For\n   example:  /Utest/test_case1/  Put in that directory an ini-file (referred to as  master-inifile )\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax   Example:      max_sim_time [3,4] /max_sim_time  \n    seed range(1, 10) /seed    run the script  makeini.py  with the obligatory option  -f : Using the\n    aforementioned example the call is:      python makeini.py -f test_case1/inifile.xml  The Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory  inifiles .   Write a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.   Your script has to start with the following lines:  #!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *  After including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.  def runtest(inifile, trajfile):  You can also use more than these arguments like this:  def runtest(inifile, trajfile, x, y, z):  If you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like  if condition_fails: \n  exit(FAILURE)  Once you have written your test you have to make your script executable, so it has to contain a main function which calls the test:  if __name__ ==  __main__ :\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info( %s exits with SUCCESS  % (argv[0]))\n  exit(SUCCESS)", 
            "title": "Verification and validation"
        }, 
        {
            "location": "/about/disclaimer/", 
            "text": "Disclaimer\n\n\nIn no event shall JuPedSim be liable to any party for direct, indirect,\nspecial, incidental, or consequential damages, including lost profits,\narising out of the use of this software and its documentation, even if\nJuPedSim has been advised of the possibility of such damage.\n\n\nJuPedSim specifically disclaims any warranties, including, but not\nlimited to, the implied warranties of merchantability and fitness for a\nparticular purpose. The software and accompanying documentation, if any,\nprovided hereunder is provided \nas is\n. JuPedSim has no obligation to\nprovide maintenance, support, updates, enhancements, or modifications.\n\n\nForschungszentrum J\u00fclich GmbH makes no warranty, expressed or implied,\nto users of JuPedSim, and accepts no responsibility for its use. Users\nof JuPedSim assume sole responsibility for determining the\nappropriateness of its use; and for any actions taken or not taken as a\nresult of analyses performed using this tool.\n\n\nUsers are warned that JuPedSim is intended for \nacademic\n use only. This\ntool is an implementation of several computer models that may or may not\nhave predictive capability when applied to a specific set of factual\ncircumstances. Lack of accurate predictions by the models could lead to\nerroneous conclusions with regard of life safety.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/about/disclaimer/#disclaimer", 
            "text": "In no event shall JuPedSim be liable to any party for direct, indirect,\nspecial, incidental, or consequential damages, including lost profits,\narising out of the use of this software and its documentation, even if\nJuPedSim has been advised of the possibility of such damage.  JuPedSim specifically disclaims any warranties, including, but not\nlimited to, the implied warranties of merchantability and fitness for a\nparticular purpose. The software and accompanying documentation, if any,\nprovided hereunder is provided  as is . JuPedSim has no obligation to\nprovide maintenance, support, updates, enhancements, or modifications.  Forschungszentrum J\u00fclich GmbH makes no warranty, expressed or implied,\nto users of JuPedSim, and accepts no responsibility for its use. Users\nof JuPedSim assume sole responsibility for determining the\nappropriateness of its use; and for any actions taken or not taken as a\nresult of analyses performed using this tool.  Users are warned that JuPedSim is intended for  academic  use only. This\ntool is an implementation of several computer models that may or may not\nhave predictive capability when applied to a specific set of factual\ncircumstances. Lack of accurate predictions by the models could lead to\nerroneous conclusions with regard of life safety.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/about/LICENSE/", 
            "text": "License\n\n\n\n\n\nJuPedSim is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nany later version.\n\n\nJuPedSim is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with JuPedSim. If not, see \nGNU licenses\n.", 
            "title": "License"
        }, 
        {
            "location": "/about/LICENSE/#license", 
            "text": "JuPedSim is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nany later version.  JuPedSim is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.  You should have received a copy of the GNU Lesser General Public License\nalong with JuPedSim. If not, see  GNU licenses .", 
            "title": "License"
        }, 
        {
            "location": "/about/contributors/", 
            "text": "Contributors\n\n\nin alphabetical order:\n\n\n\n\nAndresen, Erik\n\n\nChraibi, Mohcine\n\n\nGraf, Arne\n\n\nHaensel, David\n\n\nKemloh, Ulrich\n\n\nLiao, Weichen\n\n\nPortz, Andrea\n\n\nSchmidts, Oliver\n\n\nSchr\u00f6der, Benjamin\n\n\nShikhalev, Denis\n\n\nTordeux, Antoine\n\n\nZhang, Jun", 
            "title": "Contributors"
        }, 
        {
            "location": "/about/contributors/#contributors", 
            "text": "in alphabetical order:   Andresen, Erik  Chraibi, Mohcine  Graf, Arne  Haensel, David  Kemloh, Ulrich  Liao, Weichen  Portz, Andrea  Schmidts, Oliver  Schr\u00f6der, Benjamin  Shikhalev, Denis  Tordeux, Antoine  Zhang, Jun", 
            "title": "Contributors"
        }
    ]
}