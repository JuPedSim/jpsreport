{
    "docs": [
        {
            "location": "/", 
            "text": "JPSreport\n\n\nJPSreport\n is one module in \nJuPedSim\n. It focuses on the analysis of pedestrian characteristics using trajectories obtained from video recordings as well as simulations. \n\n\nIn current version, four different measurement methods are integrated in \nJPSreport\n to analyze pedestrian movement in different aspects and scales. These methods are mainly based on the PhD-thesis: \n\n\nPedestrian fundamental diagrams: Comparative analysis of experiments in different geometries\n.\n\n\nThe architecture of \nJPSreport\n can be shown as the figure below. \n\n\n\n\nQuick usage\n\n\nThree input files are required to run \nJPSreport\n:\n\n\n\n\nTrajectory file\n: Pedestrians\ns 2D position information over time. \n.xml\n and \n.txt\n format are adopted.\n\n\nGeometry file\n: Geometry information for a certain trajectory data. This file should be in \n.xml\n format.\n\n\nConfiguration file\n: This inifile give some information related to each measurement method. For example, the information of measurement area et al. This file should be in \n.xml\n format.\n\n\n\n\nFurther information for the three input files will be described in other pages in more detail.  Possible output of \nJPSreport\n includes data for plotting fundamental diagrams, Voronoi diagrams and profiles of pedestrians etc. in a given geometry. All the output data, e.g. density and speed, are stored in different folders as plain text in ASCII format.", 
            "title": "Home"
        }, 
        {
            "location": "/#jpsreport", 
            "text": "JPSreport  is one module in  JuPedSim . It focuses on the analysis of pedestrian characteristics using trajectories obtained from video recordings as well as simulations.   In current version, four different measurement methods are integrated in  JPSreport  to analyze pedestrian movement in different aspects and scales. These methods are mainly based on the PhD-thesis:   Pedestrian fundamental diagrams: Comparative analysis of experiments in different geometries .  The architecture of  JPSreport  can be shown as the figure below.", 
            "title": "JPSreport"
        }, 
        {
            "location": "/#quick-usage", 
            "text": "Three input files are required to run  JPSreport :   Trajectory file : Pedestrians s 2D position information over time.  .xml  and  .txt  format are adopted.  Geometry file : Geometry information for a certain trajectory data. This file should be in  .xml  format.  Configuration file : This inifile give some information related to each measurement method. For example, the information of measurement area et al. This file should be in  .xml  format.   Further information for the three input files will be described in other pages in more detail.  Possible output of  JPSreport  includes data for plotting fundamental diagrams, Voronoi diagrams and profiles of pedestrians etc. in a given geometry. All the output data, e.g. density and speed, are stored in different folders as plain text in ASCII format.", 
            "title": "Quick usage"
        }, 
        {
            "location": "/running/Introduction/", 
            "text": "JPSreport\n is one module in \nJuPedSim\n. It focuses on the analysis of pedestrian characteristics using trajectories obtained from video recordings as well as simulations. \n\n\nIn current version, four different measurement methods are integrated in \nJPSreport\n to analyze pedestrian movement in different aspects and scales. These methods are mainly based on the PhD-thesis of Dr. Jun Zhang: \n\n\nPedestrian fundamental diagrams: Comparative analysis of\nexperiments in different geometries\n.\n\n\nThe architecture of \nJPSreport\n can be shown as the figure below. \n\n\n\n\nThree input files are required to run \nJPSreport\n:\n\n\n\n\nTrajectory file\n: Pedestrians\ns 2D position information over time. \n.xml\n and \n.txt\n format are adopted.\n\n\nGeometry file\n: Geometry information for a certain trajectory data. This file should be in \n.xml\n format.\n\n\nConfiguration file\n: This inifile give some information related to each measurement method. For example, the information of measurement area et al. This file should be in \n.xml\n format.\n\n\n\n\nFurther information for the three input files will be described in other pages in more detail.  Possible output of \nJPSreport\n includes data for plotting fundamental diagrams, Voronoi diagrams and profiles of pedestrians etc. in a given geometry. All the output data, e.g. density and speed, are stored in different folders as plain text in ASCII format.", 
            "title": "Introduction"
        }, 
        {
            "location": "/running/get_start/", 
            "text": "JPSreport\n is a computer program that can be used to analyze pedestrian trajectories from experiment. or simulations. It is a C++ program that reads input parameters from a text file (\n.XML\n format), calculates basic pedestrian movement parameters like density, velocity and flow, and writes user-specified output data to files. This section describes how to obtain \nJPSreport\n and how to use it. \n\n\nHow to Get JPSreport\n\n\nDetailed instructions on how to download executables, manuals, source-code and related utilities, can be found on the \nJuPedSim Website\n. The typical\nJPSreport distribution consists of an compressed archive, which is available\nfor MS Windows, Mac OS X, and Linux. \n\n\nComputer Operating System and Software Requirements\n\n\nThe goal of making \nJPSreport\n publicly available is to provide researchers and students a tool for analyzing their trajectories obtained from model simulations as well as experiments easily. Thus, \nJPSreport\n has been designed for computers running Microsoft Windows, Mac OS X, and various implementations of Unix/Linux.\n\n\nThe following software is necessary to run \nJPSreport\n:\n\n\n\n\nCMake\n\n\nA compiler with support for C++11 e.g. g++ or clang or Visual Studio 2013\n\n\nBoost-libraries. At the moment boost is hard-linked in JPSreport.\n\n\nPython. At least Modules Numpy, Matplotlib, Polygon should be installed, since some python scripts are embeded for plotting diagrams.\n\n\n\n\nHow to Compile JPSreport\n\n\nJPSreport\n can not be installed but can be compiled under different operating systems. For the details on how to compile it please see the following links:\n\n\n\n\n\n\nCompile JPSreport in Windows\n\n\n\n\n\n\nCompile JPSreport in Linux\n\n\n\n\n\n\nCompile JPSreport in Mac OS X", 
            "title": "Getting started"
        }, 
        {
            "location": "/running/get_start/#how-to-get-jpsreport", 
            "text": "Detailed instructions on how to download executables, manuals, source-code and related utilities, can be found on the  JuPedSim Website . The typical\nJPSreport distribution consists of an compressed archive, which is available\nfor MS Windows, Mac OS X, and Linux.", 
            "title": "How to Get JPSreport"
        }, 
        {
            "location": "/running/get_start/#computer-operating-system-and-software-requirements", 
            "text": "The goal of making  JPSreport  publicly available is to provide researchers and students a tool for analyzing their trajectories obtained from model simulations as well as experiments easily. Thus,  JPSreport  has been designed for computers running Microsoft Windows, Mac OS X, and various implementations of Unix/Linux.  The following software is necessary to run  JPSreport :   CMake  A compiler with support for C++11 e.g. g++ or clang or Visual Studio 2013  Boost-libraries. At the moment boost is hard-linked in JPSreport.  Python. At least Modules Numpy, Matplotlib, Polygon should be installed, since some python scripts are embeded for plotting diagrams.", 
            "title": "Computer Operating System and Software Requirements"
        }, 
        {
            "location": "/running/get_start/#how-to-compile-jpsreport", 
            "text": "JPSreport  can not be installed but can be compiled under different operating systems. For the details on how to compile it please see the following links:    Compile JPSreport in Windows    Compile JPSreport in Linux    Compile JPSreport in Mac OS X", 
            "title": "How to Compile JPSreport"
        }, 
        {
            "location": "/running/runJPSreport/", 
            "text": "After succesfully \ncompiling\n the code, then users can start to run \nJPSreport\n and analyze your trajectories.\n\n\nSample input files are provided with the program for new users who are encouraged to first run a sample calculation before attempting to write an input file. You can find sample files in the folder \ndemos\n. Assuming that an input file called infile.xml exists in some directory *../demos/corridor/inifile.xml, run the program either in different operating systems as follows:\n\n\nFor Linux Users:\n\n\nYou can just run \nJPSreport\n in a Terminal as follows:\n\n\n./bin/JPSreport ../demos/corridor/inifile.xml\n\n\n\n\nFor Windows Users:\n\n\nOpen up a Command Prompt window, and change directories (\u201ccd\u201d) to where the executable file (\nJPSreport.exe)\n is located, then run the code by typing at the command prompt\n\n\n./bin/JPSreport.exe ../demos/corridor/inifile.xml\n\n\n\n\nFor Windows users, you can also drag the \ninifile\n to the executable file \nJPSreport\n.\n\n\ninifile.xml\n defines all the needed information to start a analysis with\n\nJPSreport\n. See  the specifications of the \nWriting JPSreport Input Files\n.\n\n\n===========\n\n\nAfter a successful analysis additional folder named \nOutput\n will be created in\nthe same directory as the used inifile. It contains the basic data including plain text and figures you planed to obtain.", 
            "title": "Running JPSreport"
        }, 
        {
            "location": "/running/runJPSreport/#for-linux-users", 
            "text": "You can just run  JPSreport  in a Terminal as follows:  ./bin/JPSreport ../demos/corridor/inifile.xml", 
            "title": "For Linux Users:"
        }, 
        {
            "location": "/running/runJPSreport/#for-windows-users", 
            "text": "Open up a Command Prompt window, and change directories (\u201ccd\u201d) to where the executable file ( JPSreport.exe)  is located, then run the code by typing at the command prompt  ./bin/JPSreport.exe ../demos/corridor/inifile.xml  For Windows users, you can also drag the  inifile  to the executable file  JPSreport .  inifile.xml  defines all the needed information to start a analysis with JPSreport . See  the specifications of the  Writing JPSreport Input Files .  ===========  After a successful analysis additional folder named  Output  will be created in\nthe same directory as the used inifile. It contains the basic data including plain text and figures you planed to obtain.", 
            "title": "For Windows Users:"
        }, 
        {
            "location": "/running/user_support/", 
            "text": "JPSreport\n can be used for practical engineering applications, but also for research in pedestrian dynamics. It is not unusual over the course of a project to run into various problems, some related to \nJPSreport\n, some related to your computer. \nJPSreport\n development is on-going, problems will inevitably occur with various routines and features. The developers need to know if a certain feature is not working, and reporting problems is encouraged. You can write issues \nhere\n. We will try our best to resolve it.\n\n\nHowever, the problem must be clearly identified. The best way to do this is to simplify the input file as much as possible so that the bug can be diagnosed. Also, limit the bug reports to those features that clearly do not work.", 
            "title": "User Support"
        }, 
        {
            "location": "/inputs/geometry/", 
            "text": "In \nJPSreport\n geometry file use the same format and definitions as in \nJPScore\n. An geometry is composed of series of \nRoom\n, \nsubroom\n,\ntransition\n, \nobstacle\n and so on. For the details on how to write an geometry file, please see \nGeometry\n.", 
            "title": "Geometry File"
        }, 
        {
            "location": "/inputs/trajectory/", 
            "text": "JPSreport\n supports the formats \n.xml\n and \n.txt\n in current version. The format is the same with the output from \nJPScore\n. \n\n\nNote that\n the unit of the data in trajectory file should be all in \nm\n.\n\n\nXML format\n\n\nThe file should include at least two main sections: header and frames.\n\n\n\n\n\n\nHeader\n\n\n \nheader version = \"0.5\"\n\n    \nagents\n 1 \n/agents\n\n    \nframeRate\n 8 \n/frameRate\n\n \n/header\n\n\n\n\n\n\n\n\nagents: The total number of agents in the trajectory data.\n\n\n\n\n\n\nframeRate: The frame rate. \n\n\n\n\n\n\n\n\n\n\nFrames: gives trajectory information in each frame.\n\n\nframe ID=\"0\"\n\n\nagent ID=\"1\"   x=\"6.60\"    y=\"3.33\"    z=\"0.30\" rA=\"0.17\"  rB=\"0.24\"   eO=\"-1.68\" eC=\"0\"/\n\n\n/frame\n\n\n\nframe ID=\"1\"\n\n\nagent ID=\"1\"   x=\"6.58\"    y=\"3.32\"    z=\"0.30\" rA=\"0.31\"  rB=\"0.23\"   eO=\"-1.75\" eC=\"54\"/\n\n\n/frame\n\n\n\n\n\n\nID\n: mandatory, the id of the pedestrians starting with 1.\n\n\nx, y, z\n: mandatory, the position of the agent.\n\n\nxVel, yVel, zVel\n: Optional, the instantaneous velocity. They are not used in \nJPSreport\n.\n\n\nrA, rB\n: Optional. The shape which is defined by a circle (ellipse) drawn around a human. They are not used in \nJPSreport\n.\n\n\neO, eC\n: Optional. They are the \nellipseOrientation\n and the \nellipseColo\n. They are not used in \nJPSreport\n.\n\n\n\n\n\n\n\n\nSample trajectory file\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\ntrajectories\n\n    \nheader version = \"0.5\"\n\n        \nagents\n1\n/agents\n\n        \nframeRate\n8\n/frameRate\n\n    \n/header\n\n\n    \nframe ID=\"0\"\n\n        \nagent ID=\"1\"   x=\"6.60\"    y=\"3.33\"    z=\"0.30\"/\n\n    \n/frame\n\n\n    \nframe ID=\"1\"\n\n        \nagent ID=\"1\"   x=\"6.58\"    y=\"3.32\"    z=\"0.30\"/\n\n    \n/frame\n\n\n/trajectories\n\n\n\n\n\n\n\n\nTXT format\n\n\nA sample trajectory in .txt format is present as below:\n\n\n    #description: my super simulation\n    #framerate: 16\n    #geometry: /home/sim/corridor.xml\n    #ID: the agent ID\n    #FR: the current frame\n    #X,Y,Z: the agents coordinates in metres\n\n    #ID FR  X       Y       Z\n    1   0   8.21    131.57  0.00\n    2   0   8.41    133.42  0.00\n    1   1   8.21    131.57  0.00\n    2   1   8.41    133.42  0.00\n    1   2   8.24    131.57  0.00\n    2   2   8.44    133.42  0.00\n    1   3   8.29    131.57  0.00\n    2   3   8.49    133.42  0.00\n    1   4   8.36    131.57  0.00\n    2   4   8.56    133.42  0.00\n    1   5   8.44    131.57  0.00\n    2   5   8.64    133.42  0.00\n    1   6   8.54    131.57  0.00\n    2   6   8.74    133.42  0.00\n    1   7   8.65    131.57  0.00\n    2   7   8.85    133.42  0.00\n    1   8   8.77    131.57  0.00\n\n\n\nThe second line is always the \nframerate\n. \nz\n are not used in \nJPSreport\n but is should be stay there. The value of \nz\n is not important.", 
            "title": "Trajectory File"
        }, 
        {
            "location": "/inputs/trajectory/#xml-format", 
            "text": "The file should include at least two main sections: header and frames.    Header    header version = \"0.5\" \n     agents  1  /agents \n     frameRate  8  /frameRate \n  /header     agents: The total number of agents in the trajectory data.    frameRate: The frame rate.       Frames: gives trajectory information in each frame.  frame ID=\"0\"  agent ID=\"1\"   x=\"6.60\"    y=\"3.33\"    z=\"0.30\" rA=\"0.17\"  rB=\"0.24\"   eO=\"-1.68\" eC=\"0\"/  /frame  frame ID=\"1\"  agent ID=\"1\"   x=\"6.58\"    y=\"3.32\"    z=\"0.30\" rA=\"0.31\"  rB=\"0.23\"   eO=\"-1.75\" eC=\"54\"/  /frame    ID : mandatory, the id of the pedestrians starting with 1.  x, y, z : mandatory, the position of the agent.  xVel, yVel, zVel : Optional, the instantaneous velocity. They are not used in  JPSreport .  rA, rB : Optional. The shape which is defined by a circle (ellipse) drawn around a human. They are not used in  JPSreport .  eO, eC : Optional. They are the  ellipseOrientation  and the  ellipseColo . They are not used in  JPSreport .     Sample trajectory file  ?xml version=\"1.0\" encoding=\"UTF-8\"?  trajectories \n     header version = \"0.5\" \n         agents 1 /agents \n         frameRate 8 /frameRate \n     /header \n\n     frame ID=\"0\" \n         agent ID=\"1\"   x=\"6.60\"    y=\"3.33\"    z=\"0.30\"/ \n     /frame \n\n     frame ID=\"1\" \n         agent ID=\"1\"   x=\"6.58\"    y=\"3.32\"    z=\"0.30\"/ \n     /frame  /trajectories", 
            "title": "XML format"
        }, 
        {
            "location": "/inputs/trajectory/#txt-format", 
            "text": "A sample trajectory in .txt format is present as below:      #description: my super simulation\n    #framerate: 16\n    #geometry: /home/sim/corridor.xml\n    #ID: the agent ID\n    #FR: the current frame\n    #X,Y,Z: the agents coordinates in metres\n\n    #ID FR  X       Y       Z\n    1   0   8.21    131.57  0.00\n    2   0   8.41    133.42  0.00\n    1   1   8.21    131.57  0.00\n    2   1   8.41    133.42  0.00\n    1   2   8.24    131.57  0.00\n    2   2   8.44    133.42  0.00\n    1   3   8.29    131.57  0.00\n    2   3   8.49    133.42  0.00\n    1   4   8.36    131.57  0.00\n    2   4   8.56    133.42  0.00\n    1   5   8.44    131.57  0.00\n    2   5   8.64    133.42  0.00\n    1   6   8.54    131.57  0.00\n    2   6   8.74    133.42  0.00\n    1   7   8.65    131.57  0.00\n    2   7   8.85    133.42  0.00\n    1   8   8.77    131.57  0.00  The second line is always the  framerate .  z  are not used in  JPSreport  but is should be stay there. The value of  z  is not important.", 
            "title": "TXT format"
        }, 
        {
            "location": "/inputs/inifile/", 
            "text": "Configuration file\n\n\nUsers can find template file in the folder \ndemos/xx/\n with name of \nini*\n when you download \nJPSreport\n. To run \nJPSreport\n the only thing you need do is to copy a sample file and change the parameters in the file based your own situation.\n\n\nIn the configuration file, the following five parts are set:\n\n\n\n\n\n\nHeader\n is as below:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\" ?\n\n\nJPSreport project=\"JPS-Project\" version=\"0.6\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://xsd.jupedsim.org/0.6/jps_report.xsd\"\n\n\n\n\n\n\n\n\ngeometry\n indicates the file name  corresponding to the trajectory files you will analyze. \nNote that\n the file should be in the same location with the configuration file.\n\n\ngeometry file = \"geo_KO_240_050_240.xml\" /\n\n\n\n\n\n\n\n\ntrajectories\n indicates the location and the name of the trajectory files will be analyzed. The format of trajectory should be \n.txt\n or \n.xml\n. The supported unit of the trajectories now is \nm\n. Two other sub-options \nfile\n and \npath\n can be supplied. If only \npath\n is given, then all files with the corresponding format in the given folder will be regarded as the upcoming trajectories and \nJPSreport\n will try to load them one by one. If both \nfile\n and \npath\n are given, then only the given trajectories will be considered (several \nfile\n can be given at the same time). The location can be either absolute path or relative path to the location of the inifile. A path is considered absolute if it starts with \u201d/\u201d (Linux system) or contains \u201d:\u201d (Windows system).\n\n\ntrajectories format=\"txt\" unit=\"m\"\n\n    \nfile name=\"traj_KO_240_050_240.txt\" /\n\n    \nfile name=\"traj_KO_240_060_240.txt\" /\n\n    \npath location=\"./\" /\n  \n\n/trajectories\n\n\n\n\n\n\n\n\nscripts\n gives relative path based on the location of inifile or the absolute path.\n\n\nscripts location=\"../../scripts/\"/\n\n\n\n\n\n\n\n\nmeasurement_areas\n indicates the types and location of the measurement areas you plan to use for analysis. Mainly Two kind of measurement areas can be exist here. \narea_B\n is 2D area and can be polygon (all the vertexes of the polygon should be given in clockwise), while \narea_L\n is a reference line indicating with two points.  \narea_L\n is only used in \nmethod_A\n and \narea_B\n are used for \nmethod_B, method_C and method_D\n. Several measurement areas can be given and distiguished with different \nid\n. Note that the option \nlength_in_movement_direction\n is only used in \nmethod_B\n and the value will be ignored in other methods. The parameter \nzPos\n is used to indicate the position of measuement area in z axis. \nzPos\n is useful for geometry with several stories. \n\n\nmeasurement_areas unit=\"m\"\n\n    \narea_B id=\"1\" type=\"BoundingBox\" zPos=\"None\"\n\n        \nvertex x=\"-2.40\" y=\"1.00\" /\n \n!-- Clockwise --\n\n        \nvertex x=\"-2.40\" y=\"3.00\" /\n\n        \nvertex x=\"0\" y=\"3.00\" /\n\n        \nvertex x=\"0\" y=\"1.00\" /\n\n        \nlength_in_movement_direction distance=\"2.0\" /\n\n    \n/area_B\n\n    \narea_L id=\"2\" type=\"Line\" zPos=\"None\"\n\n        \nstart x=\"-2.40\" y=\"1.00\" /\n\n        \nend x=\"0\" y=\"1.00\" /\n\n    \n/area_L\n\n    \narea_L id=\"3\" type=\"Line\" zPos=\"None\"\n\n        \nstart x=\"-2.40\" y=\"2.00\" /\n\n        \nend x=\"0\" y=\"2.00\" /\n\n    \n/area_L\n\n\n/measurement_areas\n\n\n\n\n\n\n\n\nvelocity\n indicates the way for calculating instantaneous velocity \nv_i(t)\n of pedestrian \ni\n at time \nt\n from trajectories. In the tool, \nv_i(t) = (X(t+frame_step/2) - X(t-frame_step/2))/frame_step\n. X is location. \nuse_x_component\n and \nuse_x_component\n indicates coordinates will be used in the calculation. When both \nuse_x_component\n and \nuse_x_component\n are set as \ntrue\n, \nx\n and \ny\n coordinates will be used. Otherwise, only coordinates in x or y direction will be used. Note that at least one of the above variables should be \ntrue\n. \nframe_step\n gives the size of time interval for calculating the velocity.\n\n\nvelocity\n\n    \nuse_x_component\ntrue\n/use_x_component\n\n    \nuse_y_component\ntrue\n/use_y_component\n\n    \nframe_step\n10\n/frame_step\n\n\n/velocity\n\n\n\n\n\n\n\n\nmethods\n indicates the parameters related to each measurement method. Four different meathods \nmethod_A\n to \nmethod_D\n are integrated in current version of \nJPSreport\n and can chosen in your analysis. Further information relating to each method can be found in \nPedestrian fundamental diagrams: Comparative analysis of experiments in different geometries\n. The meaning of each parameters can be found \nMeasurement methods\n.   \n\n\n\n\n\n\nMethod A\n\n\nmethod_A enabled=\"true\"\n\n    \nmeasurement_area id=\"2\" frame_interval=\"100\" plot_time_series=\"true\"/\n\n    \nmeasurement_area id=\"3\" frame_interval=\"100\" plot_time_series=\"true\"/\n\n\n/method_A\n\n\n\n\n\n\n\n\nParameters:\n\n\na) \nid\n specifies the location of the reference line. several measurement areas can be set in one inifile with different id.\n\n\nb) \nframe_interval\n specifies the size of time interval (in \nframe\n) for calculating flow rate.\n\n\nc) \nplot_time_series\n specifies whether output the N-t Diagram.\n\n\n\n\n\n\nOutput data (in the folder: \n./Output/Fundamental_Diagram/FlowVelocity/\n) See \nExample-Method-A\n:\n\n\nFile1: data for plotting N-t Diagram. (the accumlative nnumber of pedestrians passing the reference line and the corresponding time) \n\n\nFile2: The mean flow and velocity over the given time interval.\n\n\n\nFigure-Example-Method-A\n\n\n\n\n\n\n\n\n\n\nMethod B\n\n\nmethod_B enabled=\"false\"\n\n    \nmeasurement_area id=\"1\" /\n\n\n/method_B\n\n\n\n\nMethod B\n can only be used to analyse one directional (or part of one directional) pedestrian movement in corridor. The speed is definded by the length of the measurement area \nlength_in_movement_direction\n and the time a pedestrian stay in the area.\n\n\n\n\n\n\nParameters:\n\n\na) \nmeasurement_area\n given by id. Note that the measurement area for method_B should be rectangle based on the definition of the method. \n\n\n\n\n\n\nOutput data: \n\n\nmean density and velocity of each pedestrian (\nrho_i\n and \nv_i\n).\n\n\n\nFigure-Example-Method-B\n\n\n\n\n\n\n\n\n\n\nMethod C\nClassical method\n\n\nmethod_C enabled=\"true\"\n\n    \nmeasurement_area id=\"1\" plot_time_series=\"false\"/\n\n\n/method_C\n\n\n\n\n\n\n\n\nParameters:\n\n\na) \nid\n indicates the size and location of the measurement_area. Several measurement areas can be set in one inifile.\n\n\nb) \nplot_time_series\n specifies whether output the rho-t and v-t Diagram.\n\n\n\n\n\n\nOutput data: \n\n\nmean density and velocity of over time (\nrho(t)\n and \nv(t)\n).\n\n\n\nFigure-Example-Method-C\n\n\n\n\n\n\n\n\n\n\nMethod D\nVoronoi method\n\n\nmethod_D enabled=\"true\"\n \n    \nmeasurement_area id=\"1\" start_frame=\"None\", stop_frame=\"None\" plot_time_series=\"false\" get_individual_FD=\"false\"/\n \n    \none_dimensional enabled=\"false\"/\n\n    \ncut_by_circle enabled=\"false\" radius=\"1.0\" edges=\"10\"/\n\n    \noutput_voronoi_cells enabled=\"false\" plot_graphs=\"false\"/\n\n    \nprofiles enabled=\"false\" grid_size_x=\"0.20\" grid_size_y=\"0.20\"/\n \n\n/method_D\n\n\n\n\n\n\n\n\nParameters:\n\n\na) For each \nmeasurement_area\n, its id should be given and several ids can be set in one inifile.  \nstart_frame\n and \nstop_frame\n give the starting and ending frame for data analysis. \nplot_time_series\n specifies whether output the rho-t and v-t Diagram. \nget_individual_FD\n determines whether or not to output the data for individual fundamental diagram in the given measurement area, which is based on the Voronoi density \nrho_i\n and velocity \nv_i\n of each pedestrian \ni\n in a given measurement area but not mean value over space. If true, the related data will be written in the folder \n./Output/Fundamental_Diagram/IndividualFD/\n\n\n\n\nc) \none_dimensional\n should be used when pedestrians move on a line (for example, trajectories from \nsingle-file experiment\n)\n\n\n\n\nd) \ncut_by_circle\n determines whether to cut each cell by circle or not. Two options \nradius\n of the circle and the number of \nedges\n have to be supplied for approximating the circle if \nenabled\n is \ntrue\n.\n\n\ne) \noutput_voronoi_cells\n specifies whether or not to output data for visualizing the Voronoi diagram. Two options \nenabled\n and \nplot_graphs\n have to be set. If both of them are \ntrue\n, files including Voronoi cells, speed and the coordinates of pedestrian corresponding to each cell as well as the figures of Voronoi cells will be created in the folder \n./Output/Fundamental_Diagram/Classical_Voronoi/VoronoiCell/\n. If the latter is \nfalse\n, only the datas will be created but the figures will not be plotted. When \nenable\n is \nfalse\n, nothing will be created.\n\n\n\n\nf) \nprofiles\n indicates whether to calculate the profiles over time and space. If \nenabled\n is true, the resolution which is decided by the parameters \ngrid_size_x\n and \ngrid_size_x\n should be set. The data will be in the folder +./Output/Fundamental_ Diagram/Classical_Voronoi/field/.\n\n\n\n\n\n\n\n\nOutput data:\n\n\nMean density and velocity over time (rho(t) and v(t)).\n\n\nSample data for plotting the Voronoi cells. \n\n\nData for plotting profiles. \n\n\nData of individual Fundamental diagram.", 
            "title": "Configuration File"
        }, 
        {
            "location": "/inputs/inifile/#configuration-file", 
            "text": "Users can find template file in the folder  demos/xx/  with name of  ini*  when you download  JPSreport . To run  JPSreport  the only thing you need do is to copy a sample file and change the parameters in the file based your own situation.  In the configuration file, the following five parts are set:    Header  is as below:  ?xml version=\"1.0\" encoding=\"UTF-8\" ?  JPSreport project=\"JPS-Project\" version=\"0.6\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://xsd.jupedsim.org/0.6/jps_report.xsd\"     geometry  indicates the file name  corresponding to the trajectory files you will analyze.  Note that  the file should be in the same location with the configuration file.  geometry file = \"geo_KO_240_050_240.xml\" /     trajectories  indicates the location and the name of the trajectory files will be analyzed. The format of trajectory should be  .txt  or  .xml . The supported unit of the trajectories now is  m . Two other sub-options  file  and  path  can be supplied. If only  path  is given, then all files with the corresponding format in the given folder will be regarded as the upcoming trajectories and  JPSreport  will try to load them one by one. If both  file  and  path  are given, then only the given trajectories will be considered (several  file  can be given at the same time). The location can be either absolute path or relative path to the location of the inifile. A path is considered absolute if it starts with \u201d/\u201d (Linux system) or contains \u201d:\u201d (Windows system).  trajectories format=\"txt\" unit=\"m\" \n     file name=\"traj_KO_240_050_240.txt\" / \n     file name=\"traj_KO_240_060_240.txt\" / \n     path location=\"./\" /    /trajectories     scripts  gives relative path based on the location of inifile or the absolute path.  scripts location=\"../../scripts/\"/     measurement_areas  indicates the types and location of the measurement areas you plan to use for analysis. Mainly Two kind of measurement areas can be exist here.  area_B  is 2D area and can be polygon (all the vertexes of the polygon should be given in clockwise), while  area_L  is a reference line indicating with two points.   area_L  is only used in  method_A  and  area_B  are used for  method_B, method_C and method_D . Several measurement areas can be given and distiguished with different  id . Note that the option  length_in_movement_direction  is only used in  method_B  and the value will be ignored in other methods. The parameter  zPos  is used to indicate the position of measuement area in z axis.  zPos  is useful for geometry with several stories.   measurement_areas unit=\"m\" \n     area_B id=\"1\" type=\"BoundingBox\" zPos=\"None\" \n         vertex x=\"-2.40\" y=\"1.00\" /   !-- Clockwise -- \n         vertex x=\"-2.40\" y=\"3.00\" / \n         vertex x=\"0\" y=\"3.00\" / \n         vertex x=\"0\" y=\"1.00\" / \n         length_in_movement_direction distance=\"2.0\" / \n     /area_B \n     area_L id=\"2\" type=\"Line\" zPos=\"None\" \n         start x=\"-2.40\" y=\"1.00\" / \n         end x=\"0\" y=\"1.00\" / \n     /area_L \n     area_L id=\"3\" type=\"Line\" zPos=\"None\" \n         start x=\"-2.40\" y=\"2.00\" / \n         end x=\"0\" y=\"2.00\" / \n     /area_L  /measurement_areas     velocity  indicates the way for calculating instantaneous velocity  v_i(t)  of pedestrian  i  at time  t  from trajectories. In the tool,  v_i(t) = (X(t+frame_step/2) - X(t-frame_step/2))/frame_step . X is location.  use_x_component  and  use_x_component  indicates coordinates will be used in the calculation. When both  use_x_component  and  use_x_component  are set as  true ,  x  and  y  coordinates will be used. Otherwise, only coordinates in x or y direction will be used. Note that at least one of the above variables should be  true .  frame_step  gives the size of time interval for calculating the velocity.  velocity \n     use_x_component true /use_x_component \n     use_y_component true /use_y_component \n     frame_step 10 /frame_step  /velocity     methods  indicates the parameters related to each measurement method. Four different meathods  method_A  to  method_D  are integrated in current version of  JPSreport  and can chosen in your analysis. Further information relating to each method can be found in  Pedestrian fundamental diagrams: Comparative analysis of experiments in different geometries . The meaning of each parameters can be found  Measurement methods .       Method A  method_A enabled=\"true\" \n     measurement_area id=\"2\" frame_interval=\"100\" plot_time_series=\"true\"/ \n     measurement_area id=\"3\" frame_interval=\"100\" plot_time_series=\"true\"/  /method_A     Parameters:  a)  id  specifies the location of the reference line. several measurement areas can be set in one inifile with different id.  b)  frame_interval  specifies the size of time interval (in  frame ) for calculating flow rate.  c)  plot_time_series  specifies whether output the N-t Diagram.    Output data (in the folder:  ./Output/Fundamental_Diagram/FlowVelocity/ ) See  Example-Method-A :  File1: data for plotting N-t Diagram. (the accumlative nnumber of pedestrians passing the reference line and the corresponding time)   File2: The mean flow and velocity over the given time interval.  \nFigure-Example-Method-A      Method B  method_B enabled=\"false\" \n     measurement_area id=\"1\" /  /method_B   Method B  can only be used to analyse one directional (or part of one directional) pedestrian movement in corridor. The speed is definded by the length of the measurement area  length_in_movement_direction  and the time a pedestrian stay in the area.    Parameters:  a)  measurement_area  given by id. Note that the measurement area for method_B should be rectangle based on the definition of the method.     Output data:   mean density and velocity of each pedestrian ( rho_i  and  v_i ).  \nFigure-Example-Method-B      Method C Classical method  method_C enabled=\"true\" \n     measurement_area id=\"1\" plot_time_series=\"false\"/  /method_C     Parameters:  a)  id  indicates the size and location of the measurement_area. Several measurement areas can be set in one inifile.  b)  plot_time_series  specifies whether output the rho-t and v-t Diagram.    Output data:   mean density and velocity of over time ( rho(t)  and  v(t) ).  \nFigure-Example-Method-C      Method D Voronoi method  method_D enabled=\"true\"  \n     measurement_area id=\"1\" start_frame=\"None\", stop_frame=\"None\" plot_time_series=\"false\" get_individual_FD=\"false\"/  \n     one_dimensional enabled=\"false\"/ \n     cut_by_circle enabled=\"false\" radius=\"1.0\" edges=\"10\"/ \n     output_voronoi_cells enabled=\"false\" plot_graphs=\"false\"/ \n     profiles enabled=\"false\" grid_size_x=\"0.20\" grid_size_y=\"0.20\"/   /method_D     Parameters:  a) For each  measurement_area , its id should be given and several ids can be set in one inifile.   start_frame  and  stop_frame  give the starting and ending frame for data analysis.  plot_time_series  specifies whether output the rho-t and v-t Diagram.  get_individual_FD  determines whether or not to output the data for individual fundamental diagram in the given measurement area, which is based on the Voronoi density  rho_i  and velocity  v_i  of each pedestrian  i  in a given measurement area but not mean value over space. If true, the related data will be written in the folder  ./Output/Fundamental_Diagram/IndividualFD/   c)  one_dimensional  should be used when pedestrians move on a line (for example, trajectories from  single-file experiment )   d)  cut_by_circle  determines whether to cut each cell by circle or not. Two options  radius  of the circle and the number of  edges  have to be supplied for approximating the circle if  enabled  is  true .  e)  output_voronoi_cells  specifies whether or not to output data for visualizing the Voronoi diagram. Two options  enabled  and  plot_graphs  have to be set. If both of them are  true , files including Voronoi cells, speed and the coordinates of pedestrian corresponding to each cell as well as the figures of Voronoi cells will be created in the folder  ./Output/Fundamental_Diagram/Classical_Voronoi/VoronoiCell/ . If the latter is  false , only the datas will be created but the figures will not be plotted. When  enable  is  false , nothing will be created.   f)  profiles  indicates whether to calculate the profiles over time and space. If  enabled  is true, the resolution which is decided by the parameters  grid_size_x  and  grid_size_x  should be set. The data will be in the folder +./Output/Fundamental_ Diagram/Classical_Voronoi/field/.     Output data:  Mean density and velocity over time (rho(t) and v(t)).  Sample data for plotting the Voronoi cells.   Data for plotting profiles.   Data of individual Fundamental diagram.", 
            "title": "Configuration file"
        }, 
        {
            "location": "/methods/method_A/", 
            "text": "Method A\n calculates mean value of flow and density over time. A\nreference line is taken and studied over a\nfixed period of time \n. Using this method we can obtain the pedestrian flow \nJ\n and the velocity \n of each pedestrian passing the reference line directly. Thus, the flow over time\n\n and the time mean velocity \n can be calculated as\n\n\n\n\nwhere \n is the number of persons passing the reference line during the time interval \n. \n is the\ntime between the first and the last of the \n pedestrians. \n is the actual time\nthat the \n pedestrians used for passing the line. It can be different from \n. The time mean velocity \n is defined as the mean value of the\ninstantaneous velocities \n of the \n pedestrians. \n is calculated by use of the displacement of pedestrian \ni\n in a small time interval \n around \nt\n:", 
            "title": "Method A"
        }, 
        {
            "location": "/methods/method_B/", 
            "text": "Method B\n measures the mean value of velocity and density\nover space and time. The spatial mean velocity and density are\ncalculated by taking a segment \n in a corridor as the\nmeasurement area. The velocity \n of each person\nis defined as the length \n of the measurement area divided\nby the time he or she needs to cross the area,\n\n\n\n\nwhere \n and \n are the times a person enters and exits the measurement area, respectively.\nThe density \n for each person is calculated with equation \n\n\n\n\n is the width of the measurement area while \n is the number of person in this area at a time \nt\n.", 
            "title": "Method B"
        }, 
        {
            "location": "/methods/method_C/", 
            "text": "Method C\n is the classical method. The density \n is defined as the number of\npedestrians divided by the area of the measurement section:\n\n\n\n\nThe spatial mean velocity is the average of the instantaneous\nvelocities \n for all pedestrians in the measurement area at\ntime \nt\n:", 
            "title": "Method C"
        }, 
        {
            "location": "/methods/method_D/", 
            "text": "Method D\n is based on the use of Voronoi diagrams which are a special kind of decomposition of a metric space determined by distances to a specified discrete set of objects in the space. At any time the positions of the pedestrians\ncan be represented as a set of points, from which the Voronoi\ndiagram can be generated. The Voronoi cell area, \n, for each person \ni\n can be obtained. Then, the\ndensity and velocity distribution of the space \n  and \n can be defined as\n\n\n\n\nwhere \n is the instantaneous velocity of each person. The Voronoi density and velocity for the\nmeasurement area is defined as:\n\n\n\n\nSimilarly, the Voronoi velocity is defined as:", 
            "title": "Method D"
        }, 
        {
            "location": "/samples/get_fundamental_diagram/", 
            "text": "To obtain fundamental diagram from pedestrian trajectories using JPSreport, the following procedures should be followed:\n\n\n\n\n\n\nPrepare trajectory files\n\n\n\n\n\n\nPrepare geometry files\n\n\n\n\n\n\nPrepare the configuration file\n\n\n\n\n\n\ndetermine the measurement method\n\n\n\n\n\n\ndetermine the measurement area\n\n\n\n\n\n\nother parameters related to each method\n\n\n\n\n\n\n\n\n\n\nRun JPSreport\n\n\n\n\n\n\nDetermine starting and ending time of the the steady state from the time series of density and velocity\n\n\n\n\n\n\nGet fundamental diagram using the steady state data", 
            "title": "How to get fundamental diagram"
        }, 
        {
            "location": "/samples/get_profile/", 
            "text": "This page shows how to get profiles of density, velocity and specific flow.\n\n\n\n\n\n\nRun JPSreport in the same procedure as \ngetting fundamental diagram\n. The only one point should be noticed is the preparing of the configuration file. The method D should be enabled. Set the parameter \nenabled\n of profiles as \ntrue\n. Set the resolution of the profile from the two parameters \ngrid_size_x\nand \ngrid_size_y\n \n\n\nmethod_D enabled=\"true\"\n \n        \nprofiles enabled=\"true\" grid_size_x=\"0.20\" grid_size_y=\"0.20\"/\n \n\n/method_D\n\n\n\n\n\n\n\n\nDetermine the steady state of the experiment in the whole measurement region.\n\n\n\n\n\n\nRun the python script \n_Plot_profiles.py\n, which is in the scripts folder in JPSreport.", 
            "title": "How to get profiles"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/", 
            "text": "Code Style\n\n\nIn JuPedSim we try to code according to the \nStroustrup\n style of formatting/indenting. \nIf you want (or have) to write code in JuPedSim you really \nneed\n to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.\n\n\nThe code is formated using the automatic formatter \nastyle\n  with the option \n--style=stroustrup\n:\n\n\n\n\nStroustrup style formatting/indenting uses stroustrup brackets. \nBrackets are broken from function definitions only.\nBrackets are attached to everything else including \nnamespaces, classes, and statements within a function, arrays, structs, and enums. \nThis style frequently is used with an indent of 5 spaces. \n\n\n\n\nHere is an \nexample:\n\n\nint Foo(bool isBar) \n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}\n\n\n\n\nTabs vs Spaces\n\n\nThis can be a long and religious discussion, to make it short \nDO NOT\n use tabs, just spaces please.\n\n\nHere are some hints to configure your editor in order to use the \nstroustrup\n style\n\n\n\n\nEmacs\n:\n    Add this to your \n.emacs\n\n\n\n\n(setq c-default-style \nstroustrup\n c-basic-offset 5)\n(setq indent-tabs-mode nil)\n\n\n\n\n\n\nVim\n:\n    Set in your config file these variables\n\n\n\n\n:set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5\n\n\n\n\n\n\nEclipse\n:\n    Here is a \nplugin\n for astyle in eclipse.\n    Read also\n    \nHow to change indentation width in eclipse?\n\n\n\n\nComments\n\n\nComments and commit messages have to be written in \nEnglish\n. Please write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing.", 
            "title": "Code Style"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#code-style", 
            "text": "In JuPedSim we try to code according to the  Stroustrup  style of formatting/indenting. \nIf you want (or have) to write code in JuPedSim you really  need  to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.  The code is formated using the automatic formatter  astyle   with the option  --style=stroustrup :   Stroustrup style formatting/indenting uses stroustrup brackets. \nBrackets are broken from function definitions only.\nBrackets are attached to everything else including \nnamespaces, classes, and statements within a function, arrays, structs, and enums. \nThis style frequently is used with an indent of 5 spaces.    Here is an  example:  int Foo(bool isBar) \n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}", 
            "title": "Code Style"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#tabs-vs-spaces", 
            "text": "This can be a long and religious discussion, to make it short  DO NOT  use tabs, just spaces please.  Here are some hints to configure your editor in order to use the  stroustrup  style   Emacs :\n    Add this to your  .emacs   (setq c-default-style  stroustrup  c-basic-offset 5)\n(setq indent-tabs-mode nil)   Vim :\n    Set in your config file these variables   :set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5   Eclipse :\n    Here is a  plugin  for astyle in eclipse.\n    Read also\n     How to change indentation width in eclipse?", 
            "title": "Tabs vs Spaces"
        }, 
        {
            "location": "/contributing/code-Style-Conventions/#comments", 
            "text": "Comments and commit messages have to be written in  English . Please write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing.", 
            "title": "Comments"
        }, 
        {
            "location": "/contributing/workflow/", 
            "text": "Workflow\n\n\nThis is a git-specific workflow that helps you contribute flawlessly you JuPedSim.\n\n\n\n\nClone the project (for the first time)\n\n\n\n\n    git clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git\n\n\n\n\n\n\nChange to the developement branch and create a branch with your feature.\n\n\n\n\n    git checkout developement \n    git checkout -b feature_name\n\n\n\n\n\n\nWrite code and Commit changes\n\n\n\n\n    git commit -m \nDescribe here your changes\n\n\n\n\n\n\n\nPush your branch to GitLab. But before doing so, \ntest\n your code.\n\n\n\n\n    git push origin feature_name\n\n\n\n\n\n\n\n\nCreate a merge request\n\n\na \nMaster\n will review your code \n merge it to the developement branch (maybe).\n\n\n\n\n\n\nTips Working with Git\n\n\n\n\nPull frequently.\n\n\nCommit often, but don\u2019t push every commit.\n\n\nCreate one commit per unit of work. Break your changes down into multiple commits, e.g. \nfix bug\n, \nadd documentation\n, etc.\n\n\nPush when changes are tested.\n\n\n\n\nSee also \n8 Tips to help you work better with Git\n.\n\n\nKeywords for closing issues\n\n\nThe following keywords will close an issue via commit message:\n\n\n\n\nclose\n\n\ncloses\n\n\nclosed\n\n\nfix\n\n\nfixes\n\n\nfixed\n\n\n\n\nThe closing-pattern\n is as follows:\n\n\n((?:[Cc]los(?:e[sd]?|ing)|[Ff]ix(?:e[sd]|ing)?) +(?:(?:issues? +)?%{issue_ref}(?:(?:, *| +and +)?))+)\n\n\n\n\n\n\nTop Tip\n: Your code is maybe fine if you see on the repository\ns front page this symbol\n\n\n\nbefore your commit.", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/workflow/#workflow", 
            "text": "This is a git-specific workflow that helps you contribute flawlessly you JuPedSim.   Clone the project (for the first time)       git clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git   Change to the developement branch and create a branch with your feature.       git checkout developement \n    git checkout -b feature_name   Write code and Commit changes       git commit -m  Describe here your changes    Push your branch to GitLab. But before doing so,  test  your code.       git push origin feature_name    Create a merge request  a  Master  will review your code   merge it to the developement branch (maybe).", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/workflow/#tips-working-with-git", 
            "text": "Pull frequently.  Commit often, but don\u2019t push every commit.  Create one commit per unit of work. Break your changes down into multiple commits, e.g.  fix bug ,  add documentation , etc.  Push when changes are tested.   See also  8 Tips to help you work better with Git .", 
            "title": "Tips Working with Git"
        }, 
        {
            "location": "/contributing/workflow/#keywords-for-closing-issues", 
            "text": "The following keywords will close an issue via commit message:   close  closes  closed  fix  fixes  fixed   The closing-pattern  is as follows:  ((?:[Cc]los(?:e[sd]?|ing)|[Ff]ix(?:e[sd]|ing)?) +(?:(?:issues? +)?%{issue_ref}(?:(?:, *| +and +)?))+)   Top Tip : Your code is maybe fine if you see on the repository s front page this symbol  \nbefore your commit.", 
            "title": "Keywords for closing issues"
        }, 
        {
            "location": "/contributing/utest/", 
            "text": "Unit testing, verification and validation tests\n\n\nTesting should be enabled by cmake as follows:\n\n\ncmake -DBUILD_TESTING=ON ..\n\n\n\n\nAfter compiling (\nmake\n) the tests can be called as follows:\n\n\nctest\n\n\n\n\nThis will take some hours time (depending on your machine). Threfore, a quick testing could be used:\n\n\nctest -R Boost\n\n\n\n\nwhich run a limited set of tests on the code.\n\n\nWriting a unit test\n\n\nIf you write a unit test the first lines in your file should be\n\n\n#define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include \nboost/test/unit_test.hpp\n\n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)\n\n\n\n\nThen you can start implementing your test cases by using\n\n\nBOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n  }\n\n\n\n\nFor each method or function you want to test you should write a new test case and give it a speaking name.\n\n\nVerification and validation\n\n\nBesides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for \nJuPedSim\n (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.\n\n\nTo write additional tests, create a directory under \nUtest/\n.\n\n\n\n\nCreate in \n./jpscore/Utest/\n a new direct with a descriptive name. For\n   example: \n/Utest/test_case1/\n\n\nPut in that directory an ini-file (referred to as \nmaster-inifile\n)\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax\n\n\n\n\nExample:\n\n\n   \nmax_sim_time\n[3,4]\n/max_sim_time\n \n   \nseed\nrange(1, 10)\n/seed\n\n\n\n\n\n\n\nrun the script \nmakeini.py\n with the obligatory option \n-f\n: Using the\n    aforementioned example the call is:\n\n\n\n\n   python makeini.py -f test_case1/inifile.xml\n\n\n\n\nThe Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory \ninifiles\n.\n\n\n\n\nWrite a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.\n\n\n\n\nYour script has to start with the following lines:\n\n\n#!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *\n\n\n\n\nAfter including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.\n\n\ndef runtest(inifile, trajfile):\n\n\n\n\nYou can also use more than these arguments like this:\n\n\ndef runtest(inifile, trajfile, x, y, z):\n\n\n\n\nIf you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like\n\n\nif condition_fails: \n  exit(FAILURE)\n\n\n\n\nOnce you have written your test you have to make your script executable, so it has to contain a main function which calls the test:\n\n\nif __name__ == \n__main__\n:\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info(\n%s exits with SUCCESS\n % (argv[0]))\n  exit(SUCCESS)", 
            "title": "Unit testing"
        }, 
        {
            "location": "/contributing/utest/#unit-testing-verification-and-validation-tests", 
            "text": "Testing should be enabled by cmake as follows:  cmake -DBUILD_TESTING=ON ..  After compiling ( make ) the tests can be called as follows:  ctest  This will take some hours time (depending on your machine). Threfore, a quick testing could be used:  ctest -R Boost  which run a limited set of tests on the code.", 
            "title": "Unit testing, verification and validation tests"
        }, 
        {
            "location": "/contributing/utest/#writing-a-unit-test", 
            "text": "If you write a unit test the first lines in your file should be  #define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include  boost/test/unit_test.hpp \n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)  Then you can start implementing your test cases by using  BOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n  }  For each method or function you want to test you should write a new test case and give it a speaking name.", 
            "title": "Writing a unit test"
        }, 
        {
            "location": "/contributing/utest/#verification-and-validation", 
            "text": "Besides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for  JuPedSim  (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.  To write additional tests, create a directory under  Utest/ .   Create in  ./jpscore/Utest/  a new direct with a descriptive name. For\n   example:  /Utest/test_case1/  Put in that directory an ini-file (referred to as  master-inifile )\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax   Example:      max_sim_time [3,4] /max_sim_time  \n    seed range(1, 10) /seed    run the script  makeini.py  with the obligatory option  -f : Using the\n    aforementioned example the call is:      python makeini.py -f test_case1/inifile.xml  The Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory  inifiles .   Write a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.   Your script has to start with the following lines:  #!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *  After including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.  def runtest(inifile, trajfile):  You can also use more than these arguments like this:  def runtest(inifile, trajfile, x, y, z):  If you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like  if condition_fails: \n  exit(FAILURE)  Once you have written your test you have to make your script executable, so it has to contain a main function which calls the test:  if __name__ ==  __main__ :\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info( %s exits with SUCCESS  % (argv[0]))\n  exit(SUCCESS)", 
            "title": "Verification and validation"
        }
    ]
}