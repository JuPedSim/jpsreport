{
    "docs": [
        {
            "location": "/", 
            "text": "JPSreport\n\n\nAnalysis module of trajectories obtained from video recordings as well as from simulations. \n\n\n\n\n\nNote\n: When reporting bugs, please make sure to use the development branch \ndevelop\n.  \n\n\n\n\nJ\u00fclich Pedestrian Simulator (\nJuPedSim\n) is an open source framework for simulating pedestrian dynamics. \n\n\nThe primary goal of \nJuPedSim\n is to provide a framework to ease  the development, calibration, and validation of new models or models for pedestrian dynamics.\n\n\nJuPedSim\n is currently focusing on evacuation, but easily extendable to cover other areas e.g. passengers exchange, commuter traffic in railway stations etc.\n\n\nJuPedSim comes with four loosely coupled modules: \n\n\n\n\nJPScore\n: The simulation core\n\n\nJPSvis\n: Geometry and trajectories visualization tool\n\n\nJPSreport\n: Implementation of different measurement methods to evaluate out of trajectories the density, the velocity and the flow.\n\n\nJPSreditor\n: Geometry editor.\n\n\n\n\nImplemented methods\n\n\nIn current version, four different measurement methods are implemented in \nJPSreport\n \nto analyze pedestrian movement in different aspects and scales. For more details see \nPedestrian fundamental diagrams: Comparative analysis of\nexperiments in different geometries\n.\n\n\n\n\nMethode A\n\n\nMethode B\n\n\nMethode C\n\n\nMethode D", 
            "title": "Home"
        }, 
        {
            "location": "/#jpsreport", 
            "text": "Analysis module of trajectories obtained from video recordings as well as from simulations.    Note : When reporting bugs, please make sure to use the development branch  develop .     J\u00fclich Pedestrian Simulator ( JuPedSim ) is an open source framework for simulating pedestrian dynamics.   The primary goal of  JuPedSim  is to provide a framework to ease  the development, calibration, and validation of new models or models for pedestrian dynamics.  JuPedSim  is currently focusing on evacuation, but easily extendable to cover other areas e.g. passengers exchange, commuter traffic in railway stations etc.  JuPedSim comes with four loosely coupled modules:    JPScore : The simulation core  JPSvis : Geometry and trajectories visualization tool  JPSreport : Implementation of different measurement methods to evaluate out of trajectories the density, the velocity and the flow.  JPSreditor : Geometry editor.", 
            "title": "JPSreport"
        }, 
        {
            "location": "/#implemented-methods", 
            "text": "In current version, four different measurement methods are implemented in  JPSreport  \nto analyze pedestrian movement in different aspects and scales. For more details see  Pedestrian fundamental diagrams: Comparative analysis of experiments in different geometries .   Methode A  Methode B  Methode C  Methode D", 
            "title": "Implemented methods"
        }, 
        {
            "location": "/user_guide/quickstart/", 
            "text": "Get started\n\n\nThe organization of \nJPSreport\n is as follows\n\n\n\n\nPreparing the input files\n\n\nThree input files are required to run \nJPSreport\n:\n\n\n\n\nTrajectory file\n: Pedestrians\ns 2D position information over time. \n.xml\n and \n.txt\n format are adopted.\n\n\nGeometry file\n: Geometry information for a certain trajectory data. This file should be in \n.xml\n format.\n\n\nConfiguration file\n: This inifile give some information related to each measurement method. e. g. \n  the location of measurement areas, the chosen method etc. This file should be in \n.xml\n format.\n\n\n\n\nFurther information for the three input files are described in other pages in more detail. \n\n\nRun jpsreport\n\n\nAfter succesfully \ncompiling\n the code you can just run\n\njpsreport\n in a terminal as follows:\n\n\n./bin/jpsreport inifile.xml\n\n\n\n\ninifile.xml\n defines all the needed information to start a analysis with\n\nJPSreport\n. See  the specifications of the \nWriting JPSreport Input Files\n.\n\n\nResults\n\n\nPossible output of \nJPSreport\n includes data for plotting fundamental diagrams, \nVoronoi diagrams and profiles of pedestrians etc. in a given geometry. \nAll the output data, e.g. density and speed, are stored in different folders as plain text in ASCII format.\n\n\nAfter a successful analysis additional folder named \nOutput\n will be created in\nthe same directory as the used inifile. \nIt contains the basic data including plain text and eventually figures (depending on your specifications in the infill).", 
            "title": "Quickstart"
        }, 
        {
            "location": "/user_guide/quickstart/#get-started", 
            "text": "The organization of  JPSreport  is as follows", 
            "title": "Get started"
        }, 
        {
            "location": "/user_guide/quickstart/#preparing-the-input-files", 
            "text": "Three input files are required to run  JPSreport :   Trajectory file : Pedestrians s 2D position information over time.  .xml  and  .txt  format are adopted.  Geometry file : Geometry information for a certain trajectory data. This file should be in  .xml  format.  Configuration file : This inifile give some information related to each measurement method. e. g. \n  the location of measurement areas, the chosen method etc. This file should be in  .xml  format.   Further information for the three input files are described in other pages in more detail.", 
            "title": "Preparing the input files"
        }, 
        {
            "location": "/user_guide/quickstart/#run-jpsreport", 
            "text": "After succesfully  compiling  the code you can just run jpsreport  in a terminal as follows:  ./bin/jpsreport inifile.xml  inifile.xml  defines all the needed information to start a analysis with JPSreport . See  the specifications of the  Writing JPSreport Input Files .", 
            "title": "Run jpsreport"
        }, 
        {
            "location": "/user_guide/quickstart/#results", 
            "text": "Possible output of  JPSreport  includes data for plotting fundamental diagrams, \nVoronoi diagrams and profiles of pedestrians etc. in a given geometry. \nAll the output data, e.g. density and speed, are stored in different folders as plain text in ASCII format.  After a successful analysis additional folder named  Output  will be created in\nthe same directory as the used inifile. \nIt contains the basic data including plain text and eventually figures (depending on your specifications in the infill).", 
            "title": "Results"
        }, 
        {
            "location": "/user_guide/requirements/", 
            "text": "Requirements\n\n\n\n\nCMake\n\n\nA compiler with support for C++11 e.g. \ng++\n or \nclang\n or \nVisual Studio 2013\n\n\nfor \nJPSvis\n and \nJPSeditor\n additionally \nQt\n and \nVTK\n are needed.\n\n\nJPSreport\n and \nJPScore\n need \nBoost-libraries\n. At the moment boost is hard-linked in \nJPSreport\n, but this should be fixed in the future.", 
            "title": "Requirements"
        }, 
        {
            "location": "/user_guide/requirements/#requirements", 
            "text": "CMake  A compiler with support for C++11 e.g.  g++  or  clang  or  Visual Studio 2013  for  JPSvis  and  JPSeditor  additionally  Qt  and  VTK  are needed.  JPSreport  and  JPScore  need  Boost-libraries . At the moment boost is hard-linked in  JPSreport , but this should be fixed in the future.", 
            "title": "Requirements"
        }, 
        {
            "location": "/user_guide/configuration/", 
            "text": "Installation\n\n\nJuPedSim-modules can not be installed but compiled.\n\n\nFor all  modules the compilation is fairly straightforward: \n\n\n\n\nCreate a new directory and change to it\n\n\n\n\nmkdir build \n cd build\n\n\n\n\n\n\nRun \nCMake\n to build the project\n\n\n\n\ncmake .. \n\n\n\n\ncmake\n will check if all required  libraries are installed. \n- Compile the project\nIf the previous step terminated successfully run \n\n\nmake -jN\n\n\n\n\n(\nN\n is the number of your CPUs)\n\n\nIf the compilation succeeded a binary will be produced in\nthe direction \nbin\n. Run \njpscore\n using one of\nthe ini files in the demo directory.\n\n\nFor example:\n\n\n./bin/jpsreport inifile.xml\n\n\n\n\nUsing an IDE\n\n\n\n\n\n\nCLion\n (Windows, Linux, Mac)\n\n\nCLion\n has build in \nCMake\n-support so you only have to start a new project an set the project root to your \njpscore\n directory.\nCheck this \ntutorial\n\n\n\n\n\n\nEclipse\n (Windows, Linux, Mac)\n\n\nBuild an \nEclipse Project\n with \nCMake\n or the \nCMake-gui\n and open it with \nEclipse\n.\n\n\n\n\n\n\nVisual Studio 2013\n (v0.6+, Windows) \n\n\nRun the \nCMake-gui\n with the generator \nVisual Studio 12 (2013)\n and click on the \n*.sln\n file to open it in Visual Studio.\n\n\nThen click on \nbuild-\nbuild solution\n.\nThis should build your code.\n\n\nCurrent issues are known with the python test cases. Most of them are Unix specific.\nHowever the compilation of \njpscore\n works fine. \n\n\n\n\n\n\nXCode (v0.6+ Mac)\n\n\nRun the \nCMake-gui\n and generate an \nXCode\n-Project then open it with \nXCode\n.\n\n\nOn Mac the standard compiler is clang/clang++.\nIf the project compiles out of your console via cmake/make that does not mean it also compiles out of \nXCode\n.\n\nXCode\n forces some more strict rules while compiling.\n\n\nFor instance, there was one error we could not explain:\n\nXCode\n seems not to know that \nstd::unordered_map.embrace(...)\n is a valid function call\nand returns with an error message.\n\n\nHowever this is an \nXCode\n-specific problem. It does not occur if you are using e.g. \nCLion\n.\n\n\nEven if you compile out of console with the same compiler this throws no error. \n\n\nYou can avoid this by using the function \nstd::unordered_map.insert(std::make_pair(...))\n instead.", 
            "title": "Configuration"
        }, 
        {
            "location": "/user_guide/configuration/#installation", 
            "text": "JuPedSim-modules can not be installed but compiled.  For all  modules the compilation is fairly straightforward:    Create a new directory and change to it   mkdir build   cd build   Run  CMake  to build the project   cmake ..   cmake  will check if all required  libraries are installed. \n- Compile the project\nIf the previous step terminated successfully run   make -jN  ( N  is the number of your CPUs)  If the compilation succeeded a binary will be produced in\nthe direction  bin . Run  jpscore  using one of\nthe ini files in the demo directory.  For example:  ./bin/jpsreport inifile.xml", 
            "title": "Installation"
        }, 
        {
            "location": "/user_guide/configuration/#using-an-ide", 
            "text": "CLion  (Windows, Linux, Mac)  CLion  has build in  CMake -support so you only have to start a new project an set the project root to your  jpscore  directory.\nCheck this  tutorial    Eclipse  (Windows, Linux, Mac)  Build an  Eclipse Project  with  CMake  or the  CMake-gui  and open it with  Eclipse .    Visual Studio 2013  (v0.6+, Windows)   Run the  CMake-gui  with the generator  Visual Studio 12 (2013)  and click on the  *.sln  file to open it in Visual Studio.  Then click on  build- build solution .\nThis should build your code.  Current issues are known with the python test cases. Most of them are Unix specific.\nHowever the compilation of  jpscore  works fine.     XCode (v0.6+ Mac)  Run the  CMake-gui  and generate an  XCode -Project then open it with  XCode .  On Mac the standard compiler is clang/clang++.\nIf the project compiles out of your console via cmake/make that does not mean it also compiles out of  XCode . XCode  forces some more strict rules while compiling.  For instance, there was one error we could not explain: XCode  seems not to know that  std::unordered_map.embrace(...)  is a valid function call\nand returns with an error message.  However this is an  XCode -specific problem. It does not occur if you are using e.g.  CLion .  Even if you compile out of console with the same compiler this throws no error.   You can avoid this by using the function  std::unordered_map.insert(std::make_pair(...))  instead.", 
            "title": "Using an IDE"
        }, 
        {
            "location": "/about/disclaimer/", 
            "text": "Disclaimer\n\n\nIn no event shall \nJuPedSim\n be liable to any party for direct, indirect,\nspecial, incidental, or consequential damages, including lost profits,\narising out of the use of this software and its documentation, even if\n\nJuPedSim\n has been advised of the possibility of such damage.\n\n\nJuPedSim\n specifically disclaims any warranties, including, but not\nlimited to, the implied warranties of merchantability and fitness for a\nparticular purpose. The software and accompanying documentation, if any,\nprovided hereunder is provided \nas is\n. \nJuPedSim\n has no obligation to\nprovide maintenance, support, updates, enhancements, or modifications.\n\n\nForschungszentrum J\u00fclich GmbH makes no warranty, expressed or implied,\nto users of \nJuPedSim\n, and accepts no responsibility for its use. Users\nof \nJuPedSim\n assume sole responsibility for determining the\nappropriateness of its use; and for any actions taken or not taken as a\nresult of analyses performed using this tool.\n\n\nUsers are warned that \nJuPedSim\n is intended for \nacademic\n use only. This\ntool is an implementation of several computer models that may or may not\nhave predictive capability when applied to a specific set of factual\ncircumstances. Lack of accurate predictions by the models could lead to\nerroneous conclusions with regard of life safety.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/about/disclaimer/#disclaimer", 
            "text": "In no event shall  JuPedSim  be liable to any party for direct, indirect,\nspecial, incidental, or consequential damages, including lost profits,\narising out of the use of this software and its documentation, even if JuPedSim  has been advised of the possibility of such damage.  JuPedSim  specifically disclaims any warranties, including, but not\nlimited to, the implied warranties of merchantability and fitness for a\nparticular purpose. The software and accompanying documentation, if any,\nprovided hereunder is provided  as is .  JuPedSim  has no obligation to\nprovide maintenance, support, updates, enhancements, or modifications.  Forschungszentrum J\u00fclich GmbH makes no warranty, expressed or implied,\nto users of  JuPedSim , and accepts no responsibility for its use. Users\nof  JuPedSim  assume sole responsibility for determining the\nappropriateness of its use; and for any actions taken or not taken as a\nresult of analyses performed using this tool.  Users are warned that  JuPedSim  is intended for  academic  use only. This\ntool is an implementation of several computer models that may or may not\nhave predictive capability when applied to a specific set of factual\ncircumstances. Lack of accurate predictions by the models could lead to\nerroneous conclusions with regard of life safety.", 
            "title": "Disclaimer"
        }, 
        {
            "location": "/about/LICENSE/", 
            "text": "License\n\n\n\n\n\nJuPedSim is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nany later version.\n\n\nJuPedSim is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with JuPedSim. If not, see \nGNU licenses\n.", 
            "title": "License"
        }, 
        {
            "location": "/about/LICENSE/#license", 
            "text": "JuPedSim is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\nany later version.  JuPedSim is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.  You should have received a copy of the GNU Lesser General Public License\nalong with JuPedSim. If not, see  GNU licenses .", 
            "title": "License"
        }, 
        {
            "location": "/inputs/geometry/", 
            "text": "In \nJPSreport\n geometry file use the same format and definitions as in \nJPScore\n. An geometry is composed of series of \nRoom\n, \nsubroom\n,\ntransition\n, \nobstacle\n and so on. For the details on how to write an geometry file, please see \nGeometry\n.", 
            "title": "Geometry File"
        }, 
        {
            "location": "/inputs/trajectory/", 
            "text": "JPSreport\n supports the formats \n.xml\n and \n.txt\n in current version. The format is the same with the output from \nJPScore\n. \n\n\nNote that\n the unit of the data in trajectory file should be all in \nm\n.\n\n\nXML format\n\n\nThe file should include at least two main sections: header and frames.\n\n\n\n\n\n\nHeader\n\n\n \nheader version = \"0.5\"\n\n    \nagents\n 1 \n/agents\n\n    \nframeRate\n 8 \n/frameRate\n\n \n/header\n\n\n\n\n\n\n\n\nagents: The total number of agents in the trajectory data.\n\n\n\n\n\n\nframeRate: The frame rate. \n\n\n\n\n\n\n\n\n\n\nFrames: gives trajectory information in each frame.\n\n\nframe ID=\"0\"\n\n\nagent ID=\"1\"   x=\"6.60\"    y=\"3.33\"    z=\"0.30\" rA=\"0.17\"  rB=\"0.24\"   eO=\"-1.68\" eC=\"0\"/\n\n\n/frame\n\n\n\nframe ID=\"1\"\n\n\nagent ID=\"1\"   x=\"6.58\"    y=\"3.32\"    z=\"0.30\" rA=\"0.31\"  rB=\"0.23\"   eO=\"-1.75\" eC=\"54\"/\n\n\n/frame\n\n\n\n\n\n\nID\n: mandatory, the id of the pedestrians starting with 1.\n\n\nx, y, z\n: mandatory, the position of the agent.\n\n\nxVel, yVel, zVel\n: Optional, the instantaneous velocity. They are not used in \nJPSreport\n.\n\n\nrA, rB\n: Optional. The shape which is defined by a circle (ellipse) drawn around a human. They are not used in \nJPSreport\n.\n\n\neO, eC\n: Optional. They are the \nellipseOrientation\n and the \nellipseColo\n. They are not used in \nJPSreport\n.\n\n\n\n\n\n\n\n\nSample trajectory file\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\ntrajectories\n\n    \nheader version = \"0.5\"\n\n        \nagents\n1\n/agents\n\n        \nframeRate\n8\n/frameRate\n\n    \n/header\n\n\n    \nframe ID=\"0\"\n\n        \nagent ID=\"1\"   x=\"6.60\"    y=\"3.33\"    z=\"0.30\"/\n\n    \n/frame\n\n\n    \nframe ID=\"1\"\n\n        \nagent ID=\"1\"   x=\"6.58\"    y=\"3.32\"    z=\"0.30\"/\n\n    \n/frame\n\n\n/trajectories\n\n\n\n\n\n\n\n\nTXT format\n\n\nA sample trajectory in .txt format is present as below:\n\n\n    #description: my super simulation\n    #framerate: 16\n    #geometry: /home/sim/corridor.xml\n    #ID: the agent ID\n    #FR: the current frame\n    #X,Y,Z: the agents coordinates in metres\n\n    #ID FR  X       Y       Z\n    1   0   8.21    131.57  0.00\n    2   0   8.41    133.42  0.00\n    1   1   8.21    131.57  0.00\n    2   1   8.41    133.42  0.00\n    1   2   8.24    131.57  0.00\n    2   2   8.44    133.42  0.00\n    1   3   8.29    131.57  0.00\n    2   3   8.49    133.42  0.00\n    1   4   8.36    131.57  0.00\n    2   4   8.56    133.42  0.00\n    1   5   8.44    131.57  0.00\n    2   5   8.64    133.42  0.00\n    1   6   8.54    131.57  0.00\n    2   6   8.74    133.42  0.00\n    1   7   8.65    131.57  0.00\n    2   7   8.85    133.42  0.00\n    1   8   8.77    131.57  0.00\n\n\n\nThe line starting with \n#framerate\n and \n#ID    FR  X   Y   Z\n are necessary. \n\n\nThe order of each column is not so important now. JPSreport will check the meaning of each column from the comments \n#ID    FR  X   Y   Z", 
            "title": "Trajectory File"
        }, 
        {
            "location": "/inputs/trajectory/#xml-format", 
            "text": "The file should include at least two main sections: header and frames.    Header    header version = \"0.5\" \n     agents  1  /agents \n     frameRate  8  /frameRate \n  /header     agents: The total number of agents in the trajectory data.    frameRate: The frame rate.       Frames: gives trajectory information in each frame.  frame ID=\"0\"  agent ID=\"1\"   x=\"6.60\"    y=\"3.33\"    z=\"0.30\" rA=\"0.17\"  rB=\"0.24\"   eO=\"-1.68\" eC=\"0\"/  /frame  frame ID=\"1\"  agent ID=\"1\"   x=\"6.58\"    y=\"3.32\"    z=\"0.30\" rA=\"0.31\"  rB=\"0.23\"   eO=\"-1.75\" eC=\"54\"/  /frame    ID : mandatory, the id of the pedestrians starting with 1.  x, y, z : mandatory, the position of the agent.  xVel, yVel, zVel : Optional, the instantaneous velocity. They are not used in  JPSreport .  rA, rB : Optional. The shape which is defined by a circle (ellipse) drawn around a human. They are not used in  JPSreport .  eO, eC : Optional. They are the  ellipseOrientation  and the  ellipseColo . They are not used in  JPSreport .     Sample trajectory file  ?xml version=\"1.0\" encoding=\"UTF-8\"?  trajectories \n     header version = \"0.5\" \n         agents 1 /agents \n         frameRate 8 /frameRate \n     /header \n\n     frame ID=\"0\" \n         agent ID=\"1\"   x=\"6.60\"    y=\"3.33\"    z=\"0.30\"/ \n     /frame \n\n     frame ID=\"1\" \n         agent ID=\"1\"   x=\"6.58\"    y=\"3.32\"    z=\"0.30\"/ \n     /frame  /trajectories", 
            "title": "XML format"
        }, 
        {
            "location": "/inputs/trajectory/#txt-format", 
            "text": "A sample trajectory in .txt format is present as below:      #description: my super simulation\n    #framerate: 16\n    #geometry: /home/sim/corridor.xml\n    #ID: the agent ID\n    #FR: the current frame\n    #X,Y,Z: the agents coordinates in metres\n\n    #ID FR  X       Y       Z\n    1   0   8.21    131.57  0.00\n    2   0   8.41    133.42  0.00\n    1   1   8.21    131.57  0.00\n    2   1   8.41    133.42  0.00\n    1   2   8.24    131.57  0.00\n    2   2   8.44    133.42  0.00\n    1   3   8.29    131.57  0.00\n    2   3   8.49    133.42  0.00\n    1   4   8.36    131.57  0.00\n    2   4   8.56    133.42  0.00\n    1   5   8.44    131.57  0.00\n    2   5   8.64    133.42  0.00\n    1   6   8.54    131.57  0.00\n    2   6   8.74    133.42  0.00\n    1   7   8.65    131.57  0.00\n    2   7   8.85    133.42  0.00\n    1   8   8.77    131.57  0.00  The line starting with  #framerate  and  #ID    FR  X   Y   Z  are necessary.   The order of each column is not so important now. JPSreport will check the meaning of each column from the comments  #ID    FR  X   Y   Z", 
            "title": "TXT format"
        }, 
        {
            "location": "/inputs/inifile/", 
            "text": "Configuration file\n\n\nUsers can find template file in the folder \ndemos/xx/\n with name of \nini*\n when you download \nJPSreport\n. To run \nJPSreport\n the only thing you need do is to copy a sample file and change the parameters in the file based your own situation.\n\n\nIn the configuration file, the following five parts are set:\n\n\n\n\n\n\nHeader\n is as below:\n\n\n?xml version=\"1.0\" encoding=\"UTF-8\" ?\n\n\nJPSreport project=\"JPS-Project\" version=\"0.6\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://xsd.jupedsim.org/0.6/jps_report.xsd\"\n\n\n\n\n\n\n\n\ngeometry\n indicates the file name  corresponding to the trajectory files you will analyze. \nNote that\n the file should be in the same location with the configuration file.\n\n\ngeometry file = \"geo_KO_240_050_240.xml\" /\n\n\n\n\n\n\n\n\ntrajectories\n indicates the location and the name of the trajectory files will be analyzed. The format of trajectory should be \n.txt\n or \n.xml\n. The supported unit of the trajectories now is \nm\n. Two other sub-options \nfile\n and \npath\n can be supplied. If only \npath\n is given, then all files with the corresponding format in the given folder will be regarded as the upcoming trajectories and \nJPSreport\n will try to load them one by one. If both \nfile\n and \npath\n are given, then only the given trajectories will be considered (several \nfile\n can be given at the same time). The location can be either absolute path or relative path to the location of the inifile. A path is considered absolute if it starts with \u201d/\u201d (Linux system) or contains \u201d:\u201d (Windows system).\n\n\ntrajectories format=\"txt\" unit=\"m\"\n\n    \nfile name=\"traj_KO_240_050_240.txt\" /\n\n    \nfile name=\"traj_KO_240_060_240.txt\" /\n\n    \npath location=\"./\" /\n  \n\n/trajectories\n\n\n\n\n\n\n\n\nscripts\n gives relative path based on the location of inifile or the absolute path.\n\n\nscripts location=\"../../scripts/\"/\n\n\n\n\n\n\n\n\nmeasurement_areas\n indicates the types and location of the measurement areas you plan to use for analysis. Mainly Two kind of measurement areas can be exist here. \narea_B\n is 2D area and can be polygon (all the vertexes of the polygon should be given in clockwise), while \narea_L\n is a reference line indicating with two points.  \narea_L\n is only used in \nmethod_A\n and \narea_B\n are used for \nmethod_B, method_C and method_D\n. Several measurement areas can be given and distiguished with different \nid\n. Note that the option \nlength_in_movement_direction\n is only used in \nmethod_B\n and the value will be ignored in other methods. The parameter \nzPos\n is used to indicate the position of measuement area in z axis. \nzPos\n is useful for geometry with several stories. \n\n\nmeasurement_areas unit=\"m\"\n\n    \narea_B id=\"1\" type=\"BoundingBox\" zPos=\"None\"\n\n        \nvertex x=\"-2.40\" y=\"1.00\" /\n \n!-- Clockwise --\n\n        \nvertex x=\"-2.40\" y=\"3.00\" /\n\n        \nvertex x=\"0\" y=\"3.00\" /\n\n        \nvertex x=\"0\" y=\"1.00\" /\n\n        \nlength_in_movement_direction distance=\"2.0\" /\n\n    \n/area_B\n\n    \narea_L id=\"2\" type=\"Line\" zPos=\"None\"\n\n        \nstart x=\"-2.40\" y=\"1.00\" /\n\n        \nend x=\"0\" y=\"1.00\" /\n\n    \n/area_L\n\n    \narea_L id=\"3\" type=\"Line\" zPos=\"None\"\n\n        \nstart x=\"-2.40\" y=\"2.00\" /\n\n        \nend x=\"0\" y=\"2.00\" /\n\n    \n/area_L\n\n\n/measurement_areas\n\n\n\n\n\n\n\n\nvelocity\n indicates the way for calculating instantaneous velocity \nv_i(t)\n of pedestrian \ni\n at time \nt\n from trajectories. In the tool, \nv_i(t) = (X(t+frame_step/2) - X(t-frame_step/2))/frame_step\n.\n\n\nvelocity frame_step=\"10\" set_movement_direction=\"None\" ignore_backward_movement=\"false\"/\n\n\n\n\n\n\n\n\nParameters:\n\n\na) \nframe_step\n gives the size of time interval for calculating the velocity. The default value is 10.\n\n\nb) \nset_movement_direction\n indicates in which direction the velocity will be projected. The value of \nset_movement_direction\n can be any of the following three ones:\n\n\n\n\nNone\n,which means that you don\nt consider the movement direction and calculate the velocity by the real distance. The default value is \nNone\n.\n\n\nAny real number from \n0\nto \n360\nwhich represents the angular information of the direction in the coordination system. Note that the axis can be represented either by \nX+\n, \nY+\n, \nX-\n, \nY-\n or by 0, 90,180, 270. \n\n\nSeeTraj\n. For the complex trajectories with several times of direction change, you can indicate the detailed direction using the angular information in the trajectory file (By adding a new column in .txt file or adding a new variable in .xml file with the indicator \nVD\n) . \n\n\n\n\nc) \nignore_backward_movement\n indicates whether you want to ignore the movement opposite to the direction from \nset_movement_direction\n. The default value is \nfalse\n.\n\n\n\n\n\n\n\n\n\n\nmethods\n indicates the parameters related to each measurement method. Four different meathods \nmethod_A\n to \nmethod_D\n are integrated in current version of \nJPSreport\n and can chosen in your analysis. Further information relating to each method can be found in \nPedestrian fundamental diagrams: Comparative analysis of experiments in different geometries\n. The meaning of each parameters can be found \nMeasurement methods\n.   \n\n\n\n\n\n\nMethod A\n\n\nmethod_A enabled=\"true\"\n\n    \nmeasurement_area id=\"2\" frame_interval=\"100\" plot_time_series=\"true\"/\n\n    \nmeasurement_area id=\"3\" frame_interval=\"100\" plot_time_series=\"true\"/\n\n\n/method_A\n\n\n\n\n\n\n\n\nParameters:\n\n\na) \nid\n specifies the location of the reference line. several measurement areas can be set in one inifile with different id.\n\n\nb) \nframe_interval\n specifies the size of time interval (in \nframe\n) for calculating flow rate.\n\n\nc) \nplot_time_series\n specifies whether output the N-t Diagram.\n\n\n\n\n\n\nOutput data (in the folder: \n./Output/Fundamental_Diagram/FlowVelocity/\n) See \nExample-Method-A\n:\n\n\nFile1: data for plotting N-t Diagram. (the accumlative number of pedestrians passing the reference line and the corresponding time) \n\n\nFile2: The mean flow and velocity over the given time interval.\n\n\n\n\n\n\n\n\n\n\n\n\nMethod B\n\n\nmethod_B enabled=\"false\"\n\n    \nmeasurement_area id=\"1\" /\n\n\n/method_B\n\n\n\n\nMethod B\n can only be used to analyse one directional (or part of one directional) pedestrian movement in corridor. The speed is definded by the length of the measurement area \nlength_in_movement_direction\n and the time a pedestrian stay in the area.\n\n\n\n\n\n\nParameters:\n\n\na) \nmeasurement_area\n given by id. Note that the measurement area for method_B should be rectangle based on the definition of the method. \n\n\n\n\n\n\nOutput data: \n\n\nmean density and velocity of each pedestrian (\nrho_i\n and \nv_i\n).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod C\nClassical method\n\n\nmethod_C enabled=\"true\"\n\n    \nmeasurement_area id=\"1\" plot_time_series=\"false\"/\n\n\n/method_C\n\n\n\n\n\n\n\n\nParameters:\n\n\na) \nid\n indicates the size and location of the measurement_area. Several measurement areas can be set in one inifile.\n\n\nb) \nplot_time_series\n specifies whether output the rho-t and v-t Diagram.\n\n\n\n\n\n\nOutput data: \n\n\nmean density and velocity of over time (\nrho(t)\n and \nv(t)\n).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethod D\nVoronoi method\n\n\nmethod_D enabled=\"true\"\n \n    \nmeasurement_area id=\"1\" start_frame=\"None\", stop_frame=\"None\" plot_time_series=\"false\" get_individual_FD=\"false\"/\n \n    \none_dimensional enabled=\"false\"/\n\n    \ncut_by_circle enabled=\"false\" radius=\"1.0\" edges=\"10\"/\n\n    \noutput_voronoi_cells enabled=\"false\" plot_graphs=\"false\"/\n\n    \nprofiles enabled=\"false\" grid_size_x=\"0.20\" grid_size_y=\"0.20\"/\n \n\n/method_D\n\n\n\n\n\n\n\n\nParameters:\n\n\na) For each \nmeasurement_area\n, its id should be given and several ids can be set in one inifile.  \nstart_frame\n and \nstop_frame\n give the starting and ending frame for data analysis.  The default values of these two parameters are \nNone\n. If you plan to analysis the whole run from beginning to the end, set both of \nstart_frame\n and \nstop_frame\n as \nNone\n; If \nstart_frame =None\n but \nstop_frame\n is not, then it analyze from beginning of the trajectory to the \nstop_frame\n. if \nstart_frame\n is not \nNone\n but \nstop_frame = None\n, it will analyze from the \nstart_frame\n to the end of the movement.  \nplot_time_series\n specifies whether output the rho-t and v-t Diagram. \nget_individual_FD\n determines whether or not to output the data for individual fundamental diagram in the given measurement area, which is based on the Voronoi density \nrho_i\n and velocity \nv_i\n of each pedestrian \ni\n in a given measurement area but not mean value over space. If true, the related data will be written in the folder \n./Output/Fundamental_Diagram/IndividualFD/\n\n\n\n\n\n c) \none_dimensional\n should be used when pedestrians move on a line (for example, trajectories from \nsingle-file experiment\n)\n\n\n\n\n\n\nd) \ncut_by_circle\n determines whether to cut each cell by circle or not. Two options \nradius\n of the circle and the number of \nedges\n have to be supplied for approximating the circle if \nenabled\n is \ntrue\n.\n\n\ne) \noutput_voronoi_cells\n specifies whether or not to output data for visualizing the Voronoi diagram. Two options \nenabled\n and \nplot_graphs\n have to be set. If both of them are \ntrue\n, files including Voronoi cells, speed and the coordinates of pedestrian corresponding to each cell as well as the figures of Voronoi cells will be created in the folder \n./Output/Fundamental_Diagram/Classical_Voronoi/VoronoiCell/\n. If the latter is \nfalse\n, only the datas will be created but the figures will not be plotted. When \nenable\n is \nfalse\n, nothing will be created.\n \n\n\n\n\nf) \nprofiles\n indicates whether to calculate the profiles over time and space. If \nenabled\n is true, the resolution which is decided by the parameters \ngrid_size_x\n and \ngrid_size_x\n should be set. The data will be in the folder +./Output/Fundamental_ Diagram/Classical_Voronoi/field/.\n\n\n\n\n\n\n\n\n\nOutput data:\n\n\nMean density and velocity over time (rho(t) and v(t)).\n\n\nSample data for plotting the Voronoi cells. \n\n\nData for plotting profiles. \n\n\nData of individual Fundamental diagram.", 
            "title": "Configuration File"
        }, 
        {
            "location": "/inputs/inifile/#configuration-file", 
            "text": "Users can find template file in the folder  demos/xx/  with name of  ini*  when you download  JPSreport . To run  JPSreport  the only thing you need do is to copy a sample file and change the parameters in the file based your own situation.  In the configuration file, the following five parts are set:    Header  is as below:  ?xml version=\"1.0\" encoding=\"UTF-8\" ?  JPSreport project=\"JPS-Project\" version=\"0.6\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://xsd.jupedsim.org/0.6/jps_report.xsd\"     geometry  indicates the file name  corresponding to the trajectory files you will analyze.  Note that  the file should be in the same location with the configuration file.  geometry file = \"geo_KO_240_050_240.xml\" /     trajectories  indicates the location and the name of the trajectory files will be analyzed. The format of trajectory should be  .txt  or  .xml . The supported unit of the trajectories now is  m . Two other sub-options  file  and  path  can be supplied. If only  path  is given, then all files with the corresponding format in the given folder will be regarded as the upcoming trajectories and  JPSreport  will try to load them one by one. If both  file  and  path  are given, then only the given trajectories will be considered (several  file  can be given at the same time). The location can be either absolute path or relative path to the location of the inifile. A path is considered absolute if it starts with \u201d/\u201d (Linux system) or contains \u201d:\u201d (Windows system).  trajectories format=\"txt\" unit=\"m\" \n     file name=\"traj_KO_240_050_240.txt\" / \n     file name=\"traj_KO_240_060_240.txt\" / \n     path location=\"./\" /    /trajectories     scripts  gives relative path based on the location of inifile or the absolute path.  scripts location=\"../../scripts/\"/     measurement_areas  indicates the types and location of the measurement areas you plan to use for analysis. Mainly Two kind of measurement areas can be exist here.  area_B  is 2D area and can be polygon (all the vertexes of the polygon should be given in clockwise), while  area_L  is a reference line indicating with two points.   area_L  is only used in  method_A  and  area_B  are used for  method_B, method_C and method_D . Several measurement areas can be given and distiguished with different  id . Note that the option  length_in_movement_direction  is only used in  method_B  and the value will be ignored in other methods. The parameter  zPos  is used to indicate the position of measuement area in z axis.  zPos  is useful for geometry with several stories.   measurement_areas unit=\"m\" \n     area_B id=\"1\" type=\"BoundingBox\" zPos=\"None\" \n         vertex x=\"-2.40\" y=\"1.00\" /   !-- Clockwise -- \n         vertex x=\"-2.40\" y=\"3.00\" / \n         vertex x=\"0\" y=\"3.00\" / \n         vertex x=\"0\" y=\"1.00\" / \n         length_in_movement_direction distance=\"2.0\" / \n     /area_B \n     area_L id=\"2\" type=\"Line\" zPos=\"None\" \n         start x=\"-2.40\" y=\"1.00\" / \n         end x=\"0\" y=\"1.00\" / \n     /area_L \n     area_L id=\"3\" type=\"Line\" zPos=\"None\" \n         start x=\"-2.40\" y=\"2.00\" / \n         end x=\"0\" y=\"2.00\" / \n     /area_L  /measurement_areas     velocity  indicates the way for calculating instantaneous velocity  v_i(t)  of pedestrian  i  at time  t  from trajectories. In the tool,  v_i(t) = (X(t+frame_step/2) - X(t-frame_step/2))/frame_step .  velocity frame_step=\"10\" set_movement_direction=\"None\" ignore_backward_movement=\"false\"/     Parameters:  a)  frame_step  gives the size of time interval for calculating the velocity. The default value is 10.  b)  set_movement_direction  indicates in which direction the velocity will be projected. The value of  set_movement_direction  can be any of the following three ones:   None ,which means that you don t consider the movement direction and calculate the velocity by the real distance. The default value is  None .  Any real number from  0 to  360 which represents the angular information of the direction in the coordination system. Note that the axis can be represented either by  X+ ,  Y+ ,  X- ,  Y-  or by 0, 90,180, 270.   SeeTraj . For the complex trajectories with several times of direction change, you can indicate the detailed direction using the angular information in the trajectory file (By adding a new column in .txt file or adding a new variable in .xml file with the indicator  VD ) .    c)  ignore_backward_movement  indicates whether you want to ignore the movement opposite to the direction from  set_movement_direction . The default value is  false .      methods  indicates the parameters related to each measurement method. Four different meathods  method_A  to  method_D  are integrated in current version of  JPSreport  and can chosen in your analysis. Further information relating to each method can be found in  Pedestrian fundamental diagrams: Comparative analysis of experiments in different geometries . The meaning of each parameters can be found  Measurement methods .       Method A  method_A enabled=\"true\" \n     measurement_area id=\"2\" frame_interval=\"100\" plot_time_series=\"true\"/ \n     measurement_area id=\"3\" frame_interval=\"100\" plot_time_series=\"true\"/  /method_A     Parameters:  a)  id  specifies the location of the reference line. several measurement areas can be set in one inifile with different id.  b)  frame_interval  specifies the size of time interval (in  frame ) for calculating flow rate.  c)  plot_time_series  specifies whether output the N-t Diagram.    Output data (in the folder:  ./Output/Fundamental_Diagram/FlowVelocity/ ) See  Example-Method-A :  File1: data for plotting N-t Diagram. (the accumlative number of pedestrians passing the reference line and the corresponding time)   File2: The mean flow and velocity over the given time interval.       Method B  method_B enabled=\"false\" \n     measurement_area id=\"1\" /  /method_B   Method B  can only be used to analyse one directional (or part of one directional) pedestrian movement in corridor. The speed is definded by the length of the measurement area  length_in_movement_direction  and the time a pedestrian stay in the area.    Parameters:  a)  measurement_area  given by id. Note that the measurement area for method_B should be rectangle based on the definition of the method.     Output data:   mean density and velocity of each pedestrian ( rho_i  and  v_i ).           Method C Classical method  method_C enabled=\"true\" \n     measurement_area id=\"1\" plot_time_series=\"false\"/  /method_C     Parameters:  a)  id  indicates the size and location of the measurement_area. Several measurement areas can be set in one inifile.  b)  plot_time_series  specifies whether output the rho-t and v-t Diagram.    Output data:   mean density and velocity of over time ( rho(t)  and  v(t) ).         Method D Voronoi method  method_D enabled=\"true\"  \n     measurement_area id=\"1\" start_frame=\"None\", stop_frame=\"None\" plot_time_series=\"false\" get_individual_FD=\"false\"/  \n     one_dimensional enabled=\"false\"/ \n     cut_by_circle enabled=\"false\" radius=\"1.0\" edges=\"10\"/ \n     output_voronoi_cells enabled=\"false\" plot_graphs=\"false\"/ \n     profiles enabled=\"false\" grid_size_x=\"0.20\" grid_size_y=\"0.20\"/   /method_D     Parameters:  a) For each  measurement_area , its id should be given and several ids can be set in one inifile.   start_frame  and  stop_frame  give the starting and ending frame for data analysis.  The default values of these two parameters are  None . If you plan to analysis the whole run from beginning to the end, set both of  start_frame  and  stop_frame  as  None ; If  start_frame =None  but  stop_frame  is not, then it analyze from beginning of the trajectory to the  stop_frame . if  start_frame  is not  None  but  stop_frame = None , it will analyze from the  start_frame  to the end of the movement.   plot_time_series  specifies whether output the rho-t and v-t Diagram.  get_individual_FD  determines whether or not to output the data for individual fundamental diagram in the given measurement area, which is based on the Voronoi density  rho_i  and velocity  v_i  of each pedestrian  i  in a given measurement area but not mean value over space. If true, the related data will be written in the folder  ./Output/Fundamental_Diagram/IndividualFD/   \n c)  one_dimensional  should be used when pedestrians move on a line (for example, trajectories from  single-file experiment )    d)  cut_by_circle  determines whether to cut each cell by circle or not. Two options  radius  of the circle and the number of  edges  have to be supplied for approximating the circle if  enabled  is  true .  e)  output_voronoi_cells  specifies whether or not to output data for visualizing the Voronoi diagram. Two options  enabled  and  plot_graphs  have to be set. If both of them are  true , files including Voronoi cells, speed and the coordinates of pedestrian corresponding to each cell as well as the figures of Voronoi cells will be created in the folder  ./Output/Fundamental_Diagram/Classical_Voronoi/VoronoiCell/ . If the latter is  false , only the datas will be created but the figures will not be plotted. When  enable  is  false , nothing will be created.\n    f)  profiles  indicates whether to calculate the profiles over time and space. If  enabled  is true, the resolution which is decided by the parameters  grid_size_x  and  grid_size_x  should be set. The data will be in the folder +./Output/Fundamental_ Diagram/Classical_Voronoi/field/.     Output data:  Mean density and velocity over time (rho(t) and v(t)).  Sample data for plotting the Voronoi cells.   Data for plotting profiles.   Data of individual Fundamental diagram.", 
            "title": "Configuration file"
        }, 
        {
            "location": "/methods/method_A/", 
            "text": "Method A\n\n\nThis method calculates the mean value of flow and density over time. \n\n\nA reference line is taken and studied over a\nfixed period of time \n\\Delta {t}\n. Using this method we can obtain the pedestrian flow \nJ4 and the velocity \nv_i\n of each pedestrian passing the reference line directly. \nThus, the flow over time \n\\langle J \\rangle_{\\Delta t}\n and the time mean velocity \n\\langle v \\rangle_{\\Delta t}$ \ncan be calculated as\n\n\n\n\n\\langle J \\rangle_{\\Delta t}=\\frac{N_{\\Delta t}}{t_{N_{\\Delta t}}}\\qquad {\\rm and} \\qquad \\langle v \\rangle_{\\Delta t}=\\frac{1}{N_{\\Delta t}}\\sum_{i=1}^{N_{\\Delta t}} v_i(t),\n\n\n\n\nwhere \nN_{\\Delta t}\n is the number of persons passing the reference line during the time interval \n\\Delta {t}\n. \n\nN_{\\Delta t}\n is the time between the first and the last of the \nN_{\\Delta t}\n pedestrians. \n\nt_{N_{\\Delta t}}\n is the actual time that the \nN_{\\Delta t}\n pedestrians used for passing the line. \n\n\nIt can be different from \n\\Delta {t}\n. The time mean velocity \n\\langle v \\rangle_{\\Delta t}\n is defined as the mean value of the\ninstantaneous velocities \nN_{\\Delta t}\n pedestrians. \n\nv_i(t)\n is calculated by use of the displacement of pedestrian \ni\n in a small time interval \n\\Delta t^\\prime \n around \nt\n:\n\n\n\n\nv_i(t)=\\frac{\\vec{x_i}(t+\\Delta t^\\prime/2)-\\vec{x_i}(t-\\Delta t^\\prime/2))}{\\Delta t^\\prime}.", 
            "title": "Method A"
        }, 
        {
            "location": "/methods/method_A/#method-a", 
            "text": "This method calculates the mean value of flow and density over time.   A reference line is taken and studied over a\nfixed period of time  \\Delta {t} . Using this method we can obtain the pedestrian flow  J4 and the velocity  v_i  of each pedestrian passing the reference line directly. \nThus, the flow over time  \\langle J \\rangle_{\\Delta t}  and the time mean velocity  \\langle v \\rangle_{\\Delta t}$ \ncan be calculated as   \\langle J \\rangle_{\\Delta t}=\\frac{N_{\\Delta t}}{t_{N_{\\Delta t}}}\\qquad {\\rm and} \\qquad \\langle v \\rangle_{\\Delta t}=\\frac{1}{N_{\\Delta t}}\\sum_{i=1}^{N_{\\Delta t}} v_i(t),   where  N_{\\Delta t}  is the number of persons passing the reference line during the time interval  \\Delta {t} .  N_{\\Delta t}  is the time between the first and the last of the  N_{\\Delta t}  pedestrians.  t_{N_{\\Delta t}}  is the actual time that the  N_{\\Delta t}  pedestrians used for passing the line.   It can be different from  \\Delta {t} . The time mean velocity  \\langle v \\rangle_{\\Delta t}  is defined as the mean value of the\ninstantaneous velocities  N_{\\Delta t}  pedestrians.  v_i(t)  is calculated by use of the displacement of pedestrian  i  in a small time interval  \\Delta t^\\prime   around  t :   v_i(t)=\\frac{\\vec{x_i}(t+\\Delta t^\\prime/2)-\\vec{x_i}(t-\\Delta t^\\prime/2))}{\\Delta t^\\prime}.", 
            "title": "Method A"
        }, 
        {
            "location": "/methods/method_B/", 
            "text": "Method B\n\n\nThis method measures the mean value of velocity and density\nover space and time. The spatial mean velocity and density are\ncalculated by taking a segment \n\\Delta x\n in a corridor as the\nmeasurement area. \n\n\nThe velocity \n\\langle v \\rangle_i\n of each person\nis defined as the length \n\\Delta x\n of the measurement area divided\nby the time he or she needs to cross the area:\n\n\n\n\n\\langle v \\rangle_i=\\frac{\\Delta x}{t_{\\rm out}-t_{\\rm in}},\n\n\n\n\nwhere \nt_{in}\n and \nt_{out}\n are the times a person enters and exits the measurement area, respectively.\n\n\nThe density \n\\rho_i\n for each person \ni\n is calculated as:\n\n\n\n\n\\langle \\rho \\rangle_i=\\frac{1}{t_{\\rm out}-t_{\\rm in}}\\cdot\\int_{t_{\\rm in}}^{t_{\\rm out}} \\frac{N^\\prime(t)}{b_{\\rm cor}\\cdot\\Delta x}dt,\n\n\n\n\nwhere \nb_{cor}\n is the width of the measurement area while \nN^\\prime(t)\n is the number of person in this area at a time \nt\n.", 
            "title": "Method B"
        }, 
        {
            "location": "/methods/method_B/#method-b", 
            "text": "This method measures the mean value of velocity and density\nover space and time. The spatial mean velocity and density are\ncalculated by taking a segment  \\Delta x  in a corridor as the\nmeasurement area.   The velocity  \\langle v \\rangle_i  of each person\nis defined as the length  \\Delta x  of the measurement area divided\nby the time he or she needs to cross the area:   \\langle v \\rangle_i=\\frac{\\Delta x}{t_{\\rm out}-t_{\\rm in}},   where  t_{in}  and  t_{out}  are the times a person enters and exits the measurement area, respectively.  The density  \\rho_i  for each person  i  is calculated as:   \\langle \\rho \\rangle_i=\\frac{1}{t_{\\rm out}-t_{\\rm in}}\\cdot\\int_{t_{\\rm in}}^{t_{\\rm out}} \\frac{N^\\prime(t)}{b_{\\rm cor}\\cdot\\Delta x}dt,   where  b_{cor}  is the width of the measurement area while  N^\\prime(t)  is the number of person in this area at a time  t .", 
            "title": "Method B"
        }, 
        {
            "location": "/methods/method_C/", 
            "text": "Method C\n\n\nthis method is the classical method for calculating the density. \n\n\nThe density \n\\langle \\rho \\rangle_{\\Delta x}\n is defined as the number of\npedestrians divided by the area of the measurement section:\n\n\n\n\n\\langle \\rho \\rangle_{\\Delta x}=\\frac{N}{b_{\\rm cor}\\cdot\\Delta x}.\n\n\n\n\nThe spatial mean velocity is the average of the instantaneous\nvelocities \nv_i(t)\n for all pedestrians in the measurement area at\ntime \nt\n:\n\n\n\n\n\\langle v \\rangle_{\\Delta x}=\\frac{1}{N}\\sum_{i=1}^{N}{v_i(t)}.", 
            "title": "Method C"
        }, 
        {
            "location": "/methods/method_C/#method-c", 
            "text": "this method is the classical method for calculating the density.   The density  \\langle \\rho \\rangle_{\\Delta x}  is defined as the number of\npedestrians divided by the area of the measurement section:   \\langle \\rho \\rangle_{\\Delta x}=\\frac{N}{b_{\\rm cor}\\cdot\\Delta x}.   The spatial mean velocity is the average of the instantaneous\nvelocities  v_i(t)  for all pedestrians in the measurement area at\ntime  t :   \\langle v \\rangle_{\\Delta x}=\\frac{1}{N}\\sum_{i=1}^{N}{v_i(t)}.", 
            "title": "Method C"
        }, 
        {
            "location": "/methods/method_D/", 
            "text": "Method D\n\n\nthis method calculates the density based on Voronoi diagrams, \nwhich are a special kind of decomposition of a metric space determined by distances to a specified discrete set of objects in the space. \n\n\nAt any time the positions of the pedestrians\ncan be represented as a set of points, from which the Voronoi\ndiagram can be generated. \n\n\nThe Voronoi cell area, \nA_i\n, for each person \ni\n can be obtained. \n\n\nThen, the density and velocity distribution of the space \n\\rho_{xy}\n  and \nv_{xy}\n can be defined as\n\n\n\n\n\\rho_{xy} = 1/A_i \\quad \\rm{and} \\quad v_{xy}={v_i(t)}\\qquad \\mbox{if (x,y) \\in A_i},\n\n\n\n\nwhere \nv_i(t)\n is the instantaneous velocity of each person. \n\n\nThe Voronoi density for the\nmeasurement area is defined as:\n\n\n\n\n\\langle \\rho \\rangle_v=\\frac{\\iint{\\rho_{xy}dxdy}}{b_{\\rm cor}\\cdot\\Delta x}.\n\n\n\n\nSimilarly, the Voronoi velocity is defined as:\n\n\n\n\n\\langle v \\rangle_v=\\frac{\\iint{v_{xy}dxdy}}{b_{\\rm cor}\\cdot\\Delta x}.", 
            "title": "Method D"
        }, 
        {
            "location": "/methods/method_D/#method-d", 
            "text": "this method calculates the density based on Voronoi diagrams, \nwhich are a special kind of decomposition of a metric space determined by distances to a specified discrete set of objects in the space.   At any time the positions of the pedestrians\ncan be represented as a set of points, from which the Voronoi\ndiagram can be generated.   The Voronoi cell area,  A_i , for each person  i  can be obtained.   Then, the density and velocity distribution of the space  \\rho_{xy}   and  v_{xy}  can be defined as   \\rho_{xy} = 1/A_i \\quad \\rm{and} \\quad v_{xy}={v_i(t)}\\qquad \\mbox{if (x,y) \\in A_i},   where  v_i(t)  is the instantaneous velocity of each person.   The Voronoi density for the\nmeasurement area is defined as:   \\langle \\rho \\rangle_v=\\frac{\\iint{\\rho_{xy}dxdy}}{b_{\\rm cor}\\cdot\\Delta x}.   Similarly, the Voronoi velocity is defined as:   \\langle v \\rangle_v=\\frac{\\iint{v_{xy}dxdy}}{b_{\\rm cor}\\cdot\\Delta x}.", 
            "title": "Method D"
        }, 
        {
            "location": "/samples/get_fundamental_diagram/", 
            "text": "To obtain fundamental diagram from pedestrian trajectories using JPSreport, the following procedures should be followed:\n\n\n\n\n\n\nPrepare trajectory files\n\n\n\n\n\n\nPrepare geometry files\n\n\n\n\n\n\nPrepare the configuration file\n\n\n\n\n\n\nspecify the measurement method\n\n\n\n\n\n\nspecify the measurement area\n\n\n\n\n\n\nspecify other parameters related to each method\n\n\n\n\n\n\n\n\n\n\nDetermine starting and ending time of the the steady state from the time series of density and velocity\n\n\n\n\n\n\nRun JPSreport\n\n\n\n\n\n\nGet fundamental diagram using the steady state data", 
            "title": "How to get fundamental diagram"
        }, 
        {
            "location": "/samples/get_profile/", 
            "text": "Profiles\n\n\nThis page shows how to get profiles of density, velocity and specific flow.\nHere is an example extracted from a T-Junction experiment: \n\n\n\n\nRun jpsreport\n\n\nRun \nJPSreport\n as described in \ngetting fundamental diagram\n.\n\nIn order to calculate the profiles it is mandatory to use \nmethod D\n.\n\nMoreover, Set the parameter \nenabled\n of profiles as \ntrue\n.\n\nSet the resolution of the profile by initializing the  two parameters \ngrid_size_x\nand \ngrid_size_y\n, e.g.:  \n\n\n    \nmethod_D enabled=\"true\"\n \n            \nprofiles enabled=\"true\" grid_size_x=\"0.20\" grid_size_y=\"0.20\"/\n \n    \n/method_D\n\n\n\n\n(optional) Steady state\n\n\nDetermine the steady state of the experiment in the whole measurement region. \nIn the folder script there is a script to fulfill this task semi-manually.  \n\n\nProduce the profiles\n\n\nRun the python script \n_Plot_profiles.py\n, which is in the scripts folder in \nJPSreport\n.", 
            "title": "How to get profiles"
        }, 
        {
            "location": "/samples/get_profile/#profiles", 
            "text": "This page shows how to get profiles of density, velocity and specific flow.\nHere is an example extracted from a T-Junction experiment:", 
            "title": "Profiles"
        }, 
        {
            "location": "/samples/get_profile/#run-jpsreport", 
            "text": "Run  JPSreport  as described in  getting fundamental diagram . \nIn order to calculate the profiles it is mandatory to use  method D . \nMoreover, Set the parameter  enabled  of profiles as  true . \nSet the resolution of the profile by initializing the  two parameters  grid_size_x and  grid_size_y , e.g.:         method_D enabled=\"true\"  \n             profiles enabled=\"true\" grid_size_x=\"0.20\" grid_size_y=\"0.20\"/  \n     /method_D", 
            "title": "Run jpsreport"
        }, 
        {
            "location": "/samples/get_profile/#optional-steady-state", 
            "text": "Determine the steady state of the experiment in the whole measurement region. \nIn the folder script there is a script to fulfill this task semi-manually.", 
            "title": "(optional) Steady state"
        }, 
        {
            "location": "/samples/get_profile/#produce-the-profiles", 
            "text": "Run the python script  _Plot_profiles.py , which is in the scripts folder in  JPSreport .", 
            "title": "Produce the profiles"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing to JuPedSim\n\n\nThis project is mainly developed by a small group of researchers and students from \nJ\u00fclich Research Center\n and \nBUW\n.\nHowever you are kindly invited not only to use JuPedSim but also contributing to our open-source-project.\nIt does not matter if you are a researcher, student or just interested in pedestrian dynamics.\nThere are only a few rules and advices we want to give to you:\n\n\nNew contributors\n\n\nFirst steps\n\n\n\n\nClone/fork our github/gitlab repository\n\n\n\n\ngit clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git\n\n\n\n\n\n\nChange to the developement branch and create a branch with your feature.\n\n\n\n\ngit checkout developement \ngit checkout -b feature_name\n\n\n\n\n\n\nAssuming you are in the jpscore folder type \n\n\n\n\nmkdir build \n cd build \ncmake .. \n\n\n\n\n\n\n\n\nDownload all dependencies, check if cmake tells you something is missing\n\n\n\n\nBoost \n= 1.56\n\n\nQt\n\n\nVtk\n\n\n\n\n\n\n\n\nIf everything compiled for the first time, you are free to start\n\n\n\n\n\n\nWorkflow\n\n\nThe branches \nmaster\n and \ndevelop\n are \nprotected\n. You can \nonly push to your feature-branch.\n\nWhenever you want to add a feature or fix an issue create a new feature-branch and only work on this branch.\nIf you change what you wanted to merge the develop-branch into your feature-branch.\nMake sure all tests are running after merging and you provided new tests for your feature.\nAfter doing that open a merge/pull request.\n\n\nIf your fix/feature is accepted it will be merged into the develop-branch.\n\n\nFAQ\n\n\nReporting bugs and requesting features\n\n\nIf you got a question or a problem and need support from our team feel free to contact us.\nYou can do this via \nemail\n.\n\n\nIf you think you found an issue or bug in JuPedSim please use our issue tracker.\n\n\nUsing the issue tracker\n\n\nThe issue tracker is the preferred channel for bug reports, features requests and submitting pull requests, but please respect the following restrictions:\n\n\n\n\n\n\nPlease do not use the issue tracker for personal support requests. \nMail us\n if you need personal support.\n\n\n\n\n\n\nPlease do not derail or troll issues. Keep the discussion on topic and respect the opinions of others.\n\n\n\n\n\n\nIf you use the issue tracker we have a list of labels you should use.\n\n\nReporting bugs\n\n\nIf you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our repository.\nEven better you can submit a pull or merge request with a fix. Please use the following template and make sure you provide us as much information as possible:\n\n\n[Short description of problem here]\n\n**Reproduction Steps:**\n\n1. [First Step]\n2. [Second Step]\n3. [Other Steps...]\n\n**Expected behavior:**\n\n[Describe expected behavior here]\n\n**Observed behavior:**\n\n[Describe observed behavior here]\n\n**Screenshots and GIFs**\n\n![Screenshots and GIFs which follow reproduction steps to demonstrate the problem](url)\n\n**JuPedSim version:** [Enter JuPedSim version here]\n**OS and version:** [Enter OS name and version here]\n**Compiler and version:** [Enter compiler name and version here]\n\n**Installed Libraries:**\n[Enter Boost version here]\n[Enter Vtk version here]\n[Enter Qt version here]\n\n**Additional information:**\n\n* Problem started happening recently, didn't happen in an older version of JuPedSim: [Yes/No]\n* Problem can be reliably reproduced, doesn't happen randomly: [Yes/No]\n* Problem happens with all files and projects, not only some files or projects: [Yes/No]\n* Problem happens with the attached ini and geometry files: [Yes/No]\n\n\n\n\nRequesting features\n\n\nEnhancement suggestions are tracked as issues. After you\nve determined which repository your enhancement suggestions is related to, create an issue on that repository and provide the following information:\n\n\n\n\nUse a clear and descriptive title for the issue to identify the suggestion.\n\n\nProvide a step-by-step description of the suggested enhancement in as many details as possible.\n\n\nProvide specific examples to demonstrate the steps. Include copy/pasteable snippets which you use in those examples, as Markdown code blocks.\n\n\nDescribe the current behavior and explain which behavior you expected to see instead and why.\n\n\n\n\nIf you want to support us by writing the enhancement yourself consider what kind of change it is:\n\n\n\n\nMajor changes\n that you wish to contribute to the project should be discussed first on our \ndev mailing list\n so that we can better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.\n\n\nSmall changes\n can be crafted and submitted to our repository as a \npull or merge request\n.\n\n\n\n\nNevertheless open an issue for documentation purposes with the following template:\n\n\n[Short description of suggestion]\n\n**Steps which explain the enhancement**\n\n1. [First Step]\n2. [Second Step]\n3. [Other Steps...]\n\n**Current and suggested behavior**\n\n[Describe current and suggested behavior here]\n\n**Why would the enhancement be useful to most users**\n\n[Explain why the enhancement would be useful to most users]\n\n[List some other text editors or applications where this enhancement exists]\n\n**Screenshots and GIFs**\n\n![Screenshots and GIFs which demonstrate the steps or part of JuPedSim the enhancement suggestion is related to](url)\n\n**JuPedSim Version:** [Enter JuPedSim version here]\n**OS and Version:** [Enter OS name and version here]~\n\n\n\n\n\nWriting Code\n\n\nCoding style\n\n\nIn JuPedSim we try to code according to the \nStroustrup\n style of formatting/indenting.\nIf you want (or have) to write code in JuPedSim you really \nneed\n to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.\n\n\nThe code is formated using the automatic formatter \nastyle\n  with the option \n--style=stroustrup\n:\n\n\n\n\nStroustrup style formatting/indenting uses stroustrup brackets.\nBrackets are broken from function definitions only.\nBrackets are attached to everything else including\nnamespaces, classes, and statements within a function, arrays, structs, and enums.\nThis style frequently is used with an indent of 5 spaces.\n\n\n\n\nHere is an \nexample:\n\n\nint Foo(bool isBar)\n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}\n\n\n\n\nTabs vs Spaces\n\n\nThis can be a long and religious discussion, to make it short \nDO NOT\n use tabs, just spaces please.\n\n\nHere are some hints to configure your editor in order to use the \nstroustrup\n style\n\n\n\n\nEmacs\n:\n    Add this to your \n.emacs\n\n\n\n\n(setq c-default-style \nstroustrup\n c-basic-offset 5)\n(setq indent-tabs-mode nil)\n\n\n\n\n\n\nVim\n:\n    Set in your config file these variables\n\n\n\n\n:set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5\n\n\n\n\n\n\n\n\nEclipse\n:\n    Here is a \nplugin\n for astyle in eclipse.\n    Read also\n    \nHow to change indentation width in eclipse?\n\n\n\n\n\n\nClion\n\n\n\n\n\n\nUnit tests\n\n\nTesting should be enabled by cmake as follows:\n\n\ncmake -DBUILD_TESTING=ON ..\n\n\n\n\nAfter compiling (\nmake\n) the tests can be called as follows:\n\n\nctest\n\n\n\n\nThis will take some hours time (depending on your machine). Threfore, a quick testing could be used:\n\n\nctest -R Boost\n\n\n\n\nwhich run a limited set of compiled unit tests on the code.\n\n\nWriting a unit test\n\n\nIf you write a unit test the first lines in your file should be\n\n\n#define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include \nboost/test/unit_test.hpp\n\n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)\n\n\n\n\nThen you can start implementing your test cases by using\n\n\nBOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n}\n\n\n\n\nFor each method or function you want to test you should write a new test case and give it a speaking name.\n\n\nVerification and validation\n\n\nBesides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for \nJuPedSim\n (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.\n\n\nTo write additional tests, create a directory under \nUtest/\n.\n\n\n\n\nCreate in \n./jpscore/Utest/\n a new direct with a descriptive name. For\n   example: \n/Utest/test_case1/\n\n\nPut in that directory an ini-file (referred to as \nmaster-inifile\n)\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax\n\n\n\n\nExample:\n\n\n   \nmax_sim_time\n[3,4]\n/max_sim_time\n \n   \nseed\nrange(1, 10)\n/seed\n\n\n\n\n\n\n\nrun the script \nmakeini.py\n with the obligatory option \n-f\n: Using the\n    aforementioned example the call is:\n\n\n\n\n   python makeini.py -f test_case1/inifile.xml\n\n\n\n\nThe Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory \ninifiles\n.\n\n\n\n\nWrite a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.\n\n\n\n\nYour script has to start with the following lines:\n\n\n#!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *\n\n\n\n\nAfter including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.\n\n\ndef runtest(inifile, trajfile):\n\n\n\n\nYou can also use more than these arguments like this:\n\n\ndef runtest(inifile, trajfile, x, y, z):\n\n\n\n\nIf you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like\n\n\nif condition_fails: \n  exit(FAILURE)\n\n\n\n\nOnce you have written your test you have to make your script executable, so it has to contain a main function which calls the test:\n\n\nif __name__ == \n__main__\n:\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info(\n%s exits with SUCCESS\n % (argv[0]))\n  exit(SUCCESS)\n\n\n\n\nWriting Documentation\n\n\nComments\n\n\nComments have to be written in \nEnglish\n everywhere. Please use markdown where applicable.\n\n\nDocumenting new features\n\n\nPlease update the changelog with every feature/fix you provide so we can keep track of changes for new versions of JuPedSim.\n\n\nSample Templates\n\n\n/*!\n * \\file [filename]\n *\n * \\author [your name]\n * \\date\n * \\version     v[x.y]\n * \\copyright   \n2016-2022\n Forschungszentrum J\u00fclich GmbH. All rights reserved.\n *\n * \\section License\n * This file is part of JuPedSim.\n *\n * JuPedSim is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * JuPedSim is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with JuPedSim. If not, see \nhttp://www.gnu.org/licenses/\n.\n *\n * \\section Description\n *\n * [your comment here]\n */\n\n\n\n\n/*!\n * \\class [class name]\n *\n * \\brief [brief description]\n *\n * [detailed description]\n *\n * \\author [your name]\n * \\date\n */\n\n\n\n\n/*!\n * \\brief [brief description]\n *\n * [detailed description]\n *\n * \\param[in] [name of input parameter] [its description]\n * \\param[out] [name of output parameter] [its description]\n * \\return [information about return value]\n * \\sa [see also section]\n * \\note [any note about the function you might have]\n * \\warning [any warning if necessary]\n */\n\n\n\n\nCommiting Code\n\n\nCommiting guidelines\n\n\nPlease write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing. Please do this with respect\nto the following points:\n- Name every class (file if you only change a single file) you changed and right after that a brief description of your\nchange.\n- Use markdown if you want do make a longer description than two sentences.\n- Reference issues and pull requests liberally if your commit is connected to one.\n- When only changing documentation start with \n:memo:\n\n- Consider starting the commit message with an applicable emoji:\n\n    - \n \n:new:\n when adding a new feature\n\n    - \n \n:art:\n when improving the format/structure of the code\n\n    - \n \n:racehorse:\n when improving performance\n\n    - \n \n:memo:\n when writing docs\n\n    - \n \n:penguin:\n when fixing something on Linux\n\n    - \n \n:apple:\n when fixing something on Mac OS\n\n    - \n \n:checkered_flag:\n when fixing something on Windows\n\n    - \n \n:bug:\n when fixing a bug\n\n    - \n \n:fire:\n when removing code or files\n\n    - \n \n:green_heart:\n when fixing the CI build\n\n    - \n \n:white_check_mark:\n when adding tests", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing-to-jupedsim", 
            "text": "This project is mainly developed by a small group of researchers and students from  J\u00fclich Research Center  and  BUW .\nHowever you are kindly invited not only to use JuPedSim but also contributing to our open-source-project.\nIt does not matter if you are a researcher, student or just interested in pedestrian dynamics.\nThere are only a few rules and advices we want to give to you:", 
            "title": "Contributing to JuPedSim"
        }, 
        {
            "location": "/contributing/#new-contributors", 
            "text": "", 
            "title": "New contributors"
        }, 
        {
            "location": "/contributing/#first-steps", 
            "text": "Clone/fork our github/gitlab repository   git clone https://cst.version.fz-juelich.de/jupedsim/jpscore.git   Change to the developement branch and create a branch with your feature.   git checkout developement \ngit checkout -b feature_name   Assuming you are in the jpscore folder type    mkdir build   cd build \ncmake ..     Download all dependencies, check if cmake tells you something is missing   Boost  = 1.56  Qt  Vtk     If everything compiled for the first time, you are free to start", 
            "title": "First steps"
        }, 
        {
            "location": "/contributing/#workflow", 
            "text": "The branches  master  and  develop  are  protected . You can  only push to your feature-branch. \nWhenever you want to add a feature or fix an issue create a new feature-branch and only work on this branch.\nIf you change what you wanted to merge the develop-branch into your feature-branch.\nMake sure all tests are running after merging and you provided new tests for your feature.\nAfter doing that open a merge/pull request.  If your fix/feature is accepted it will be merged into the develop-branch.", 
            "title": "Workflow"
        }, 
        {
            "location": "/contributing/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/contributing/#reporting-bugs-and-requesting-features", 
            "text": "If you got a question or a problem and need support from our team feel free to contact us.\nYou can do this via  email .  If you think you found an issue or bug in JuPedSim please use our issue tracker.", 
            "title": "Reporting bugs and requesting features"
        }, 
        {
            "location": "/contributing/#using-the-issue-tracker", 
            "text": "The issue tracker is the preferred channel for bug reports, features requests and submitting pull requests, but please respect the following restrictions:    Please do not use the issue tracker for personal support requests.  Mail us  if you need personal support.    Please do not derail or troll issues. Keep the discussion on topic and respect the opinions of others.    If you use the issue tracker we have a list of labels you should use.", 
            "title": "Using the issue tracker"
        }, 
        {
            "location": "/contributing/#reporting-bugs", 
            "text": "If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our repository.\nEven better you can submit a pull or merge request with a fix. Please use the following template and make sure you provide us as much information as possible:  [Short description of problem here]\n\n**Reproduction Steps:**\n\n1. [First Step]\n2. [Second Step]\n3. [Other Steps...]\n\n**Expected behavior:**\n\n[Describe expected behavior here]\n\n**Observed behavior:**\n\n[Describe observed behavior here]\n\n**Screenshots and GIFs**\n\n![Screenshots and GIFs which follow reproduction steps to demonstrate the problem](url)\n\n**JuPedSim version:** [Enter JuPedSim version here]\n**OS and version:** [Enter OS name and version here]\n**Compiler and version:** [Enter compiler name and version here]\n\n**Installed Libraries:**\n[Enter Boost version here]\n[Enter Vtk version here]\n[Enter Qt version here]\n\n**Additional information:**\n\n* Problem started happening recently, didn't happen in an older version of JuPedSim: [Yes/No]\n* Problem can be reliably reproduced, doesn't happen randomly: [Yes/No]\n* Problem happens with all files and projects, not only some files or projects: [Yes/No]\n* Problem happens with the attached ini and geometry files: [Yes/No]", 
            "title": "Reporting bugs"
        }, 
        {
            "location": "/contributing/#requesting-features", 
            "text": "Enhancement suggestions are tracked as issues. After you ve determined which repository your enhancement suggestions is related to, create an issue on that repository and provide the following information:   Use a clear and descriptive title for the issue to identify the suggestion.  Provide a step-by-step description of the suggested enhancement in as many details as possible.  Provide specific examples to demonstrate the steps. Include copy/pasteable snippets which you use in those examples, as Markdown code blocks.  Describe the current behavior and explain which behavior you expected to see instead and why.   If you want to support us by writing the enhancement yourself consider what kind of change it is:   Major changes  that you wish to contribute to the project should be discussed first on our  dev mailing list  so that we can better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project.  Small changes  can be crafted and submitted to our repository as a  pull or merge request .   Nevertheless open an issue for documentation purposes with the following template:  [Short description of suggestion]\n\n**Steps which explain the enhancement**\n\n1. [First Step]\n2. [Second Step]\n3. [Other Steps...]\n\n**Current and suggested behavior**\n\n[Describe current and suggested behavior here]\n\n**Why would the enhancement be useful to most users**\n\n[Explain why the enhancement would be useful to most users]\n\n[List some other text editors or applications where this enhancement exists]\n\n**Screenshots and GIFs**\n\n![Screenshots and GIFs which demonstrate the steps or part of JuPedSim the enhancement suggestion is related to](url)\n\n**JuPedSim Version:** [Enter JuPedSim version here]\n**OS and Version:** [Enter OS name and version here]~", 
            "title": "Requesting features"
        }, 
        {
            "location": "/contributing/#writing-code", 
            "text": "", 
            "title": "Writing Code"
        }, 
        {
            "location": "/contributing/#coding-style", 
            "text": "In JuPedSim we try to code according to the  Stroustrup  style of formatting/indenting.\nIf you want (or have) to write code in JuPedSim you really  need  to respect that style.\nThis is important not just aesthetically but also practically. Diff commits are much more clearer and cleaner.  The code is formated using the automatic formatter  astyle   with the option  --style=stroustrup :   Stroustrup style formatting/indenting uses stroustrup brackets.\nBrackets are broken from function definitions only.\nBrackets are attached to everything else including\nnamespaces, classes, and statements within a function, arrays, structs, and enums.\nThis style frequently is used with an indent of 5 spaces.   Here is an  example:  int Foo(bool isBar)\n{\n     if (isBar) {\n          bar();\n          return 1;\n     } else\n          return 0;\n}", 
            "title": "Coding style"
        }, 
        {
            "location": "/contributing/#tabs-vs-spaces", 
            "text": "This can be a long and religious discussion, to make it short  DO NOT  use tabs, just spaces please.  Here are some hints to configure your editor in order to use the  stroustrup  style   Emacs :\n    Add this to your  .emacs   (setq c-default-style  stroustrup  c-basic-offset 5)\n(setq indent-tabs-mode nil)   Vim :\n    Set in your config file these variables   :set autoindent\n:set cindent\n:set expandtab\n:set shiftwidth=5\n:set softtabstop=5    Eclipse :\n    Here is a  plugin  for astyle in eclipse.\n    Read also\n     How to change indentation width in eclipse?    Clion", 
            "title": "Tabs vs Spaces"
        }, 
        {
            "location": "/contributing/#unit-tests", 
            "text": "Testing should be enabled by cmake as follows:  cmake -DBUILD_TESTING=ON ..  After compiling ( make ) the tests can be called as follows:  ctest  This will take some hours time (depending on your machine). Threfore, a quick testing could be used:  ctest -R Boost  which run a limited set of compiled unit tests on the code.", 
            "title": "Unit tests"
        }, 
        {
            "location": "/contributing/#writing-a-unit-test", 
            "text": "If you write a unit test the first lines in your file should be  #define BOOST_TEST_MODULE MyTest\n#define BOOST_TEST_DYN_LINK\n#include  boost/test/unit_test.hpp \n#include classtotest.h\n\nBOOST_AUTO_TEST_SUITE(MyTestClass)  Then you can start implementing your test cases by using  BOOST_AUTO_TEST_CASE(MyTestCase) \n{\n  ...\n}  For each method or function you want to test you should write a new test case and give it a speaking name.", 
            "title": "Writing a unit test"
        }, 
        {
            "location": "/contributing/#verification-and-validation", 
            "text": "Besides unit testing, we use in JuPedSim python-driven tests for verification and validation purposes.\nSeveral validation and verification tests for  JuPedSim  (jpscore) are defined in the following section (e.g. Rimea and NIST).\nIn order to make the nightly builds run automatically, consider the following steps, before adding new tests.\nThis procedure is also recommended to make simulations with several inifiles e.g. different seeds.  To write additional tests, create a directory under  Utest/ .   Create in  ./jpscore/Utest/  a new direct with a descriptive name. For\n   example:  /Utest/test_case1/  Put in that directory an ini-file (referred to as  master-inifile )\n   and all the relevant files for a simulation, e.g. geometry file, etc. In the master-inifile you can use python syntax   Example:      max_sim_time [3,4] /max_sim_time  \n    seed range(1, 10) /seed    run the script  makeini.py  with the obligatory option  -f : Using the\n    aforementioned example the call is:      python makeini.py -f test_case1/inifile.xml  The Script is going to create two directories:\n- test_case/trajectories: Here live the simulation trajectories.\n- test_case/inifiles: and here the inifiles, that will be produced  based on the master inifile (in this case test_case1/inifile.xml).\n    Note, that the geometry file and the trajectory files are all relative to the project files in the directory  inifiles .   Write a runtest-script. Here you have to define the logic of your test. What should be tested? When does the file succeed or file? etc.   Your script has to start with the following lines:  #!/usr/bin/env python\nimport os\nimport sys\nfrom sys import *\nsys.path.append(os.path.abspath(os.path.dirname(sys.path[0])))\nfrom JPSRunTest import JPSRunTestDriver\nfrom utils import *  After including these lines you can write the test you want to perform for every ini-file generated from the makeini.py script.\nThe method signature must contain at least two arguments to receive the inifile and the trajectory file from the simulation.  def runtest(inifile, trajfile):  You can also use more than these arguments like this:  def runtest(inifile, trajfile, x, y, z):  If you need a more complex example of how to use more arguments for further calculations please see runtest_14.py.\nIf a test has to fail because an error occurs or a necessary condition is not fulfilled  you can simply exit the script by using something like  if condition_fails: \n  exit(FAILURE)  Once you have written your test you have to make your script executable, so it has to contain a main function which calls the test:  if __name__ ==  __main__ :\n  test = JPSRunTestDriver(1, argv0=argv[0], testdir=sys.path[0])\n  test.run_test(testfunction=runtest)\n  logging.info( %s exits with SUCCESS  % (argv[0]))\n  exit(SUCCESS)", 
            "title": "Verification and validation"
        }, 
        {
            "location": "/contributing/#writing-documentation", 
            "text": "", 
            "title": "Writing Documentation"
        }, 
        {
            "location": "/contributing/#comments", 
            "text": "Comments have to be written in  English  everywhere. Please use markdown where applicable.", 
            "title": "Comments"
        }, 
        {
            "location": "/contributing/#documenting-new-features", 
            "text": "Please update the changelog with every feature/fix you provide so we can keep track of changes for new versions of JuPedSim.", 
            "title": "Documenting new features"
        }, 
        {
            "location": "/contributing/#sample-templates", 
            "text": "/*!\n * \\file [filename]\n *\n * \\author [your name]\n * \\date\n * \\version     v[x.y]\n * \\copyright    2016-2022  Forschungszentrum J\u00fclich GmbH. All rights reserved.\n *\n * \\section License\n * This file is part of JuPedSim.\n *\n * JuPedSim is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * any later version.\n *\n * JuPedSim is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with JuPedSim. If not, see  http://www.gnu.org/licenses/ .\n *\n * \\section Description\n *\n * [your comment here]\n */  /*!\n * \\class [class name]\n *\n * \\brief [brief description]\n *\n * [detailed description]\n *\n * \\author [your name]\n * \\date\n */  /*!\n * \\brief [brief description]\n *\n * [detailed description]\n *\n * \\param[in] [name of input parameter] [its description]\n * \\param[out] [name of output parameter] [its description]\n * \\return [information about return value]\n * \\sa [see also section]\n * \\note [any note about the function you might have]\n * \\warning [any warning if necessary]\n */", 
            "title": "Sample Templates"
        }, 
        {
            "location": "/contributing/#commiting-code", 
            "text": "", 
            "title": "Commiting Code"
        }, 
        {
            "location": "/contributing/#commiting-guidelines", 
            "text": "Please write clear and concise commit messages so that\nyour co-developers can directly grasp what changes on the code are you committing/pushing. Please do this with respect\nto the following points:\n- Name every class (file if you only change a single file) you changed and right after that a brief description of your\nchange.\n- Use markdown if you want do make a longer description than two sentences.\n- Reference issues and pull requests liberally if your commit is connected to one.\n- When only changing documentation start with  :memo: \n- Consider starting the commit message with an applicable emoji: \n    -    :new:  when adding a new feature \n    -    :art:  when improving the format/structure of the code \n    -    :racehorse:  when improving performance \n    -    :memo:  when writing docs \n    -    :penguin:  when fixing something on Linux \n    -    :apple:  when fixing something on Mac OS \n    -    :checkered_flag:  when fixing something on Windows \n    -    :bug:  when fixing a bug \n    -    :fire:  when removing code or files \n    -    :green_heart:  when fixing the CI build \n    -    :white_check_mark:  when adding tests", 
            "title": "Commiting guidelines"
        }
    ]
}